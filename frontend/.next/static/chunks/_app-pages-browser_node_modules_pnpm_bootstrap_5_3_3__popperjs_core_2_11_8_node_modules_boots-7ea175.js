"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_node_modules_pnpm_bootstrap_5_3_3__popperjs_core_2_11_8_node_modules_boots-7ea175"],{

/***/ "(app-pages-browser)/./node_modules/.pnpm/bootstrap@5.3.3_@popperjs+core@2.11.8/node_modules/bootstrap/dist/js/bootstrap.bundle.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/bootstrap@5.3.3_@popperjs+core@2.11.8/node_modules/bootstrap/dist/js/bootstrap.bundle.js ***!
  \*********************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("\n/*!\n  * Bootstrap v5.3.3 (https://getbootstrap.com/)\n  * Copyright 2011-2024 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\n  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n  */ (function(global, factory) {\n     true ? module.exports = factory() : 0;\n})(void 0, function() {\n    \"use strict\";\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap dom/data.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const elementMap = new Map();\n    const Data = {\n        set (element, key, instance) {\n            if (!elementMap.has(element)) {\n                elementMap.set(element, new Map());\n            }\n            const instanceMap = elementMap.get(element);\n            // make it clear we only want one instance per element\n            // can be removed later when multiple key/instances are fine to be used\n            if (!instanceMap.has(key) && instanceMap.size !== 0) {\n                // eslint-disable-next-line no-console\n                console.error(\"Bootstrap doesn't allow more than one instance per element. Bound instance: \".concat(Array.from(instanceMap.keys())[0], \".\"));\n                return;\n            }\n            instanceMap.set(key, instance);\n        },\n        get (element, key) {\n            if (elementMap.has(element)) {\n                return elementMap.get(element).get(key) || null;\n            }\n            return null;\n        },\n        remove (element, key) {\n            if (!elementMap.has(element)) {\n                return;\n            }\n            const instanceMap = elementMap.get(element);\n            instanceMap.delete(key);\n            // free up element references if there are no instances left for an element\n            if (instanceMap.size === 0) {\n                elementMap.delete(element);\n            }\n        }\n    };\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap util/index.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ const MAX_UID = 1000000;\n    const MILLISECONDS_MULTIPLIER = 1000;\n    const TRANSITION_END = \"transitionend\";\n    /**\n   * Properly escape IDs selectors to handle weird IDs\n   * @param {string} selector\n   * @returns {string}\n   */ const parseSelector = (selector)=>{\n        if (selector && window.CSS && window.CSS.escape) {\n            // document.querySelector needs escaping to handle IDs (html5+) containing for instance /\n            selector = selector.replace(/#([^\\s\"#']+)/g, (match, id)=>\"#\".concat(CSS.escape(id)));\n        }\n        return selector;\n    };\n    // Shout-out Angus Croll (https://goo.gl/pxwQGp)\n    const toType = (object)=>{\n        if (object === null || object === undefined) {\n            return \"\".concat(object);\n        }\n        return Object.prototype.toString.call(object).match(/\\s([a-z]+)/i)[1].toLowerCase();\n    };\n    /**\n   * Public Util API\n   */ const getUID = (prefix)=>{\n        do {\n            prefix += Math.floor(Math.random() * MAX_UID);\n        }while (document.getElementById(prefix));\n        return prefix;\n    };\n    const getTransitionDurationFromElement = (element)=>{\n        if (!element) {\n            return 0;\n        }\n        // Get transition-duration of the element\n        let { transitionDuration, transitionDelay } = window.getComputedStyle(element);\n        const floatTransitionDuration = Number.parseFloat(transitionDuration);\n        const floatTransitionDelay = Number.parseFloat(transitionDelay);\n        // Return 0 if element or transition duration is not found\n        if (!floatTransitionDuration && !floatTransitionDelay) {\n            return 0;\n        }\n        // If multiple durations are defined, take the first\n        transitionDuration = transitionDuration.split(\",\")[0];\n        transitionDelay = transitionDelay.split(\",\")[0];\n        return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;\n    };\n    const triggerTransitionEnd = (element)=>{\n        element.dispatchEvent(new Event(TRANSITION_END));\n    };\n    const isElement$1 = (object)=>{\n        if (!object || typeof object !== \"object\") {\n            return false;\n        }\n        if (typeof object.jquery !== \"undefined\") {\n            object = object[0];\n        }\n        return typeof object.nodeType !== \"undefined\";\n    };\n    const getElement = (object)=>{\n        // it's a jQuery object or a node element\n        if (isElement$1(object)) {\n            return object.jquery ? object[0] : object;\n        }\n        if (typeof object === \"string\" && object.length > 0) {\n            return document.querySelector(parseSelector(object));\n        }\n        return null;\n    };\n    const isVisible = (element)=>{\n        if (!isElement$1(element) || element.getClientRects().length === 0) {\n            return false;\n        }\n        const elementIsVisible = getComputedStyle(element).getPropertyValue(\"visibility\") === \"visible\";\n        // Handle `details` element as its content may falsie appear visible when it is closed\n        const closedDetails = element.closest(\"details:not([open])\");\n        if (!closedDetails) {\n            return elementIsVisible;\n        }\n        if (closedDetails !== element) {\n            const summary = element.closest(\"summary\");\n            if (summary && summary.parentNode !== closedDetails) {\n                return false;\n            }\n            if (summary === null) {\n                return false;\n            }\n        }\n        return elementIsVisible;\n    };\n    const isDisabled = (element)=>{\n        if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n            return true;\n        }\n        if (element.classList.contains(\"disabled\")) {\n            return true;\n        }\n        if (typeof element.disabled !== \"undefined\") {\n            return element.disabled;\n        }\n        return element.hasAttribute(\"disabled\") && element.getAttribute(\"disabled\") !== \"false\";\n    };\n    const findShadowRoot = (element)=>{\n        if (!document.documentElement.attachShadow) {\n            return null;\n        }\n        // Can find the shadow root otherwise it'll return the document\n        if (typeof element.getRootNode === \"function\") {\n            const root = element.getRootNode();\n            return root instanceof ShadowRoot ? root : null;\n        }\n        if (element instanceof ShadowRoot) {\n            return element;\n        }\n        // when we don't find a shadow root\n        if (!element.parentNode) {\n            return null;\n        }\n        return findShadowRoot(element.parentNode);\n    };\n    const noop = ()=>{};\n    /**\n   * Trick to restart an element's animation\n   *\n   * @param {HTMLElement} element\n   * @return void\n   *\n   * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation\n   */ const reflow = (element)=>{\n        element.offsetHeight; // eslint-disable-line no-unused-expressions\n    };\n    const getjQuery = ()=>{\n        if (window.jQuery && !document.body.hasAttribute(\"data-bs-no-jquery\")) {\n            return window.jQuery;\n        }\n        return null;\n    };\n    const DOMContentLoadedCallbacks = [];\n    const onDOMContentLoaded = (callback)=>{\n        if (document.readyState === \"loading\") {\n            // add listener on the first call when the document is in loading state\n            if (!DOMContentLoadedCallbacks.length) {\n                document.addEventListener(\"DOMContentLoaded\", ()=>{\n                    for (const callback of DOMContentLoadedCallbacks){\n                        callback();\n                    }\n                });\n            }\n            DOMContentLoadedCallbacks.push(callback);\n        } else {\n            callback();\n        }\n    };\n    const isRTL = ()=>document.documentElement.dir === \"rtl\";\n    const defineJQueryPlugin = (plugin)=>{\n        onDOMContentLoaded(()=>{\n            const $ = getjQuery();\n            /* istanbul ignore if */ if ($) {\n                const name = plugin.NAME;\n                const JQUERY_NO_CONFLICT = $.fn[name];\n                $.fn[name] = plugin.jQueryInterface;\n                $.fn[name].Constructor = plugin;\n                $.fn[name].noConflict = ()=>{\n                    $.fn[name] = JQUERY_NO_CONFLICT;\n                    return plugin.jQueryInterface;\n                };\n            }\n        });\n    };\n    const execute = function(possibleCallback) {\n        let args = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], defaultValue = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : possibleCallback;\n        return typeof possibleCallback === \"function\" ? possibleCallback(...args) : defaultValue;\n    };\n    const executeAfterTransition = function(callback, transitionElement) {\n        let waitForTransition = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;\n        if (!waitForTransition) {\n            execute(callback);\n            return;\n        }\n        const durationPadding = 5;\n        const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;\n        let called = false;\n        const handler = (param)=>{\n            let { target } = param;\n            if (target !== transitionElement) {\n                return;\n            }\n            called = true;\n            transitionElement.removeEventListener(TRANSITION_END, handler);\n            execute(callback);\n        };\n        transitionElement.addEventListener(TRANSITION_END, handler);\n        setTimeout(()=>{\n            if (!called) {\n                triggerTransitionEnd(transitionElement);\n            }\n        }, emulatedDuration);\n    };\n    /**\n   * Return the previous/next element of a list.\n   *\n   * @param {array} list    The list of elements\n   * @param activeElement   The active element\n   * @param shouldGetNext   Choose to get next or previous element\n   * @param isCycleAllowed\n   * @return {Element|elem} The proper element\n   */ const getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed)=>{\n        const listLength = list.length;\n        let index = list.indexOf(activeElement);\n        // if the element does not exist in the list return an element\n        // depending on the direction and if cycle is allowed\n        if (index === -1) {\n            return !shouldGetNext && isCycleAllowed ? list[listLength - 1] : list[0];\n        }\n        index += shouldGetNext ? 1 : -1;\n        if (isCycleAllowed) {\n            index = (index + listLength) % listLength;\n        }\n        return list[Math.max(0, Math.min(index, listLength - 1))];\n    };\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap dom/event-handler.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const namespaceRegex = /[^.]*(?=\\..*)\\.|.*/;\n    const stripNameRegex = /\\..*/;\n    const stripUidRegex = /::\\d+$/;\n    const eventRegistry = {}; // Events storage\n    let uidEvent = 1;\n    const customEvents = {\n        mouseenter: \"mouseover\",\n        mouseleave: \"mouseout\"\n    };\n    const nativeEvents = new Set([\n        \"click\",\n        \"dblclick\",\n        \"mouseup\",\n        \"mousedown\",\n        \"contextmenu\",\n        \"mousewheel\",\n        \"DOMMouseScroll\",\n        \"mouseover\",\n        \"mouseout\",\n        \"mousemove\",\n        \"selectstart\",\n        \"selectend\",\n        \"keydown\",\n        \"keypress\",\n        \"keyup\",\n        \"orientationchange\",\n        \"touchstart\",\n        \"touchmove\",\n        \"touchend\",\n        \"touchcancel\",\n        \"pointerdown\",\n        \"pointermove\",\n        \"pointerup\",\n        \"pointerleave\",\n        \"pointercancel\",\n        \"gesturestart\",\n        \"gesturechange\",\n        \"gestureend\",\n        \"focus\",\n        \"blur\",\n        \"change\",\n        \"reset\",\n        \"select\",\n        \"submit\",\n        \"focusin\",\n        \"focusout\",\n        \"load\",\n        \"unload\",\n        \"beforeunload\",\n        \"resize\",\n        \"move\",\n        \"DOMContentLoaded\",\n        \"readystatechange\",\n        \"error\",\n        \"abort\",\n        \"scroll\"\n    ]);\n    /**\n   * Private methods\n   */ function makeEventUid(element, uid) {\n        return uid && \"\".concat(uid, \"::\").concat(uidEvent++) || element.uidEvent || uidEvent++;\n    }\n    function getElementEvents(element) {\n        const uid = makeEventUid(element);\n        element.uidEvent = uid;\n        eventRegistry[uid] = eventRegistry[uid] || {};\n        return eventRegistry[uid];\n    }\n    function bootstrapHandler(element, fn) {\n        return function handler(event) {\n            hydrateObj(event, {\n                delegateTarget: element\n            });\n            if (handler.oneOff) {\n                EventHandler.off(element, event.type, fn);\n            }\n            return fn.apply(element, [\n                event\n            ]);\n        };\n    }\n    function bootstrapDelegationHandler(element, selector, fn) {\n        return function handler(event) {\n            const domElements = element.querySelectorAll(selector);\n            for(let { target } = event; target && target !== this; target = target.parentNode){\n                for (const domElement of domElements){\n                    if (domElement !== target) {\n                        continue;\n                    }\n                    hydrateObj(event, {\n                        delegateTarget: target\n                    });\n                    if (handler.oneOff) {\n                        EventHandler.off(element, event.type, selector, fn);\n                    }\n                    return fn.apply(target, [\n                        event\n                    ]);\n                }\n            }\n        };\n    }\n    function findHandler(events, callable) {\n        let delegationSelector = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;\n        return Object.values(events).find((event)=>event.callable === callable && event.delegationSelector === delegationSelector);\n    }\n    function normalizeParameters(originalTypeEvent, handler, delegationFunction) {\n        const isDelegated = typeof handler === \"string\";\n        // TODO: tooltip passes `false` instead of selector, so we need to check\n        const callable = isDelegated ? delegationFunction : handler || delegationFunction;\n        let typeEvent = getTypeEvent(originalTypeEvent);\n        if (!nativeEvents.has(typeEvent)) {\n            typeEvent = originalTypeEvent;\n        }\n        return [\n            isDelegated,\n            callable,\n            typeEvent\n        ];\n    }\n    function addHandler(element, originalTypeEvent, handler, delegationFunction, oneOff) {\n        if (typeof originalTypeEvent !== \"string\" || !element) {\n            return;\n        }\n        let [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);\n        // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position\n        // this prevents the handler from being dispatched the same way as mouseover or mouseout does\n        if (originalTypeEvent in customEvents) {\n            const wrapFunction = (fn)=>{\n                return function(event) {\n                    if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {\n                        return fn.call(this, event);\n                    }\n                };\n            };\n            callable = wrapFunction(callable);\n        }\n        const events = getElementEvents(element);\n        const handlers = events[typeEvent] || (events[typeEvent] = {});\n        const previousFunction = findHandler(handlers, callable, isDelegated ? handler : null);\n        if (previousFunction) {\n            previousFunction.oneOff = previousFunction.oneOff && oneOff;\n            return;\n        }\n        const uid = makeEventUid(callable, originalTypeEvent.replace(namespaceRegex, \"\"));\n        const fn = isDelegated ? bootstrapDelegationHandler(element, handler, callable) : bootstrapHandler(element, callable);\n        fn.delegationSelector = isDelegated ? handler : null;\n        fn.callable = callable;\n        fn.oneOff = oneOff;\n        fn.uidEvent = uid;\n        handlers[uid] = fn;\n        element.addEventListener(typeEvent, fn, isDelegated);\n    }\n    function removeHandler(element, events, typeEvent, handler, delegationSelector) {\n        const fn = findHandler(events[typeEvent], handler, delegationSelector);\n        if (!fn) {\n            return;\n        }\n        element.removeEventListener(typeEvent, fn, Boolean(delegationSelector));\n        delete events[typeEvent][fn.uidEvent];\n    }\n    function removeNamespacedHandlers(element, events, typeEvent, namespace) {\n        const storeElementEvent = events[typeEvent] || {};\n        for (const [handlerKey, event] of Object.entries(storeElementEvent)){\n            if (handlerKey.includes(namespace)) {\n                removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);\n            }\n        }\n    }\n    function getTypeEvent(event) {\n        // allow to get the native events from namespaced events ('click.bs.button' --> 'click')\n        event = event.replace(stripNameRegex, \"\");\n        return customEvents[event] || event;\n    }\n    const EventHandler = {\n        on (element, event, handler, delegationFunction) {\n            addHandler(element, event, handler, delegationFunction, false);\n        },\n        one (element, event, handler, delegationFunction) {\n            addHandler(element, event, handler, delegationFunction, true);\n        },\n        off (element, originalTypeEvent, handler, delegationFunction) {\n            if (typeof originalTypeEvent !== \"string\" || !element) {\n                return;\n            }\n            const [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);\n            const inNamespace = typeEvent !== originalTypeEvent;\n            const events = getElementEvents(element);\n            const storeElementEvent = events[typeEvent] || {};\n            const isNamespace = originalTypeEvent.startsWith(\".\");\n            if (typeof callable !== \"undefined\") {\n                // Simplest case: handler is passed, remove that listener ONLY.\n                if (!Object.keys(storeElementEvent).length) {\n                    return;\n                }\n                removeHandler(element, events, typeEvent, callable, isDelegated ? handler : null);\n                return;\n            }\n            if (isNamespace) {\n                for (const elementEvent of Object.keys(events)){\n                    removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));\n                }\n            }\n            for (const [keyHandlers, event] of Object.entries(storeElementEvent)){\n                const handlerKey = keyHandlers.replace(stripUidRegex, \"\");\n                if (!inNamespace || originalTypeEvent.includes(handlerKey)) {\n                    removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);\n                }\n            }\n        },\n        trigger (element, event, args) {\n            if (typeof event !== \"string\" || !element) {\n                return null;\n            }\n            const $ = getjQuery();\n            const typeEvent = getTypeEvent(event);\n            const inNamespace = event !== typeEvent;\n            let jQueryEvent = null;\n            let bubbles = true;\n            let nativeDispatch = true;\n            let defaultPrevented = false;\n            if (inNamespace && $) {\n                jQueryEvent = $.Event(event, args);\n                $(element).trigger(jQueryEvent);\n                bubbles = !jQueryEvent.isPropagationStopped();\n                nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();\n                defaultPrevented = jQueryEvent.isDefaultPrevented();\n            }\n            const evt = hydrateObj(new Event(event, {\n                bubbles,\n                cancelable: true\n            }), args);\n            if (defaultPrevented) {\n                evt.preventDefault();\n            }\n            if (nativeDispatch) {\n                element.dispatchEvent(evt);\n            }\n            if (evt.defaultPrevented && jQueryEvent) {\n                jQueryEvent.preventDefault();\n            }\n            return evt;\n        }\n    };\n    function hydrateObj(obj) {\n        let meta = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n        for (const [key, value] of Object.entries(meta)){\n            try {\n                obj[key] = value;\n            } catch (_unused) {\n                Object.defineProperty(obj, key, {\n                    configurable: true,\n                    get () {\n                        return value;\n                    }\n                });\n            }\n        }\n        return obj;\n    }\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap dom/manipulator.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ function normalizeData(value) {\n        if (value === \"true\") {\n            return true;\n        }\n        if (value === \"false\") {\n            return false;\n        }\n        if (value === Number(value).toString()) {\n            return Number(value);\n        }\n        if (value === \"\" || value === \"null\") {\n            return null;\n        }\n        if (typeof value !== \"string\") {\n            return value;\n        }\n        try {\n            return JSON.parse(decodeURIComponent(value));\n        } catch (_unused) {\n            return value;\n        }\n    }\n    function normalizeDataKey(key) {\n        return key.replace(/[A-Z]/g, (chr)=>\"-\".concat(chr.toLowerCase()));\n    }\n    const Manipulator = {\n        setDataAttribute (element, key, value) {\n            element.setAttribute(\"data-bs-\".concat(normalizeDataKey(key)), value);\n        },\n        removeDataAttribute (element, key) {\n            element.removeAttribute(\"data-bs-\".concat(normalizeDataKey(key)));\n        },\n        getDataAttributes (element) {\n            if (!element) {\n                return {};\n            }\n            const attributes = {};\n            const bsKeys = Object.keys(element.dataset).filter((key)=>key.startsWith(\"bs\") && !key.startsWith(\"bsConfig\"));\n            for (const key of bsKeys){\n                let pureKey = key.replace(/^bs/, \"\");\n                pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);\n                attributes[pureKey] = normalizeData(element.dataset[key]);\n            }\n            return attributes;\n        },\n        getDataAttribute (element, key) {\n            return normalizeData(element.getAttribute(\"data-bs-\".concat(normalizeDataKey(key))));\n        }\n    };\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap util/config.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Class definition\n   */ class Config {\n        // Getters\n        static get Default() {\n            return {};\n        }\n        static get DefaultType() {\n            return {};\n        }\n        static get NAME() {\n            throw new Error('You have to implement the static method \"NAME\", for each component!');\n        }\n        _getConfig(config) {\n            config = this._mergeConfigObj(config);\n            config = this._configAfterMerge(config);\n            this._typeCheckConfig(config);\n            return config;\n        }\n        _configAfterMerge(config) {\n            return config;\n        }\n        _mergeConfigObj(config, element) {\n            const jsonConfig = isElement$1(element) ? Manipulator.getDataAttribute(element, \"config\") : {}; // try to parse\n            return {\n                ...this.constructor.Default,\n                ...typeof jsonConfig === \"object\" ? jsonConfig : {},\n                ...isElement$1(element) ? Manipulator.getDataAttributes(element) : {},\n                ...typeof config === \"object\" ? config : {}\n            };\n        }\n        _typeCheckConfig(config) {\n            let configTypes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this.constructor.DefaultType;\n            for (const [property, expectedTypes] of Object.entries(configTypes)){\n                const value = config[property];\n                const valueType = isElement$1(value) ? \"element\" : toType(value);\n                if (!new RegExp(expectedTypes).test(valueType)) {\n                    throw new TypeError(\"\".concat(this.constructor.NAME.toUpperCase(), ': Option \"').concat(property, '\" provided type \"').concat(valueType, '\" but expected type \"').concat(expectedTypes, '\".'));\n                }\n            }\n        }\n    }\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap base-component.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const VERSION = \"5.3.3\";\n    /**\n   * Class definition\n   */ class BaseComponent extends Config {\n        // Public\n        dispose() {\n            Data.remove(this._element, this.constructor.DATA_KEY);\n            EventHandler.off(this._element, this.constructor.EVENT_KEY);\n            for (const propertyName of Object.getOwnPropertyNames(this)){\n                this[propertyName] = null;\n            }\n        }\n        _queueCallback(callback, element) {\n            let isAnimated = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;\n            executeAfterTransition(callback, element, isAnimated);\n        }\n        _getConfig(config) {\n            config = this._mergeConfigObj(config, this._element);\n            config = this._configAfterMerge(config);\n            this._typeCheckConfig(config);\n            return config;\n        }\n        // Static\n        static getInstance(element) {\n            return Data.get(getElement(element), this.DATA_KEY);\n        }\n        static getOrCreateInstance(element) {\n            let config = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n            return this.getInstance(element) || new this(element, typeof config === \"object\" ? config : null);\n        }\n        static get VERSION() {\n            return VERSION;\n        }\n        static get DATA_KEY() {\n            return \"bs.\".concat(this.NAME);\n        }\n        static get EVENT_KEY() {\n            return \".\".concat(this.DATA_KEY);\n        }\n        static eventName(name) {\n            return \"\".concat(name).concat(this.EVENT_KEY);\n        }\n        constructor(element, config){\n            super();\n            element = getElement(element);\n            if (!element) {\n                return;\n            }\n            this._element = element;\n            this._config = this._getConfig(config);\n            Data.set(this._element, this.constructor.DATA_KEY, this);\n        }\n    }\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap dom/selector-engine.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ const getSelector = (element)=>{\n        let selector = element.getAttribute(\"data-bs-target\");\n        if (!selector || selector === \"#\") {\n            let hrefAttribute = element.getAttribute(\"href\");\n            // The only valid content that could double as a selector are IDs or classes,\n            // so everything starting with `#` or `.`. If a \"real\" URL is used as the selector,\n            // `document.querySelector` will rightfully complain it is invalid.\n            // See https://github.com/twbs/bootstrap/issues/32273\n            if (!hrefAttribute || !hrefAttribute.includes(\"#\") && !hrefAttribute.startsWith(\".\")) {\n                return null;\n            }\n            // Just in case some CMS puts out a full URL with the anchor appended\n            if (hrefAttribute.includes(\"#\") && !hrefAttribute.startsWith(\"#\")) {\n                hrefAttribute = \"#\".concat(hrefAttribute.split(\"#\")[1]);\n            }\n            selector = hrefAttribute && hrefAttribute !== \"#\" ? hrefAttribute.trim() : null;\n        }\n        return selector ? selector.split(\",\").map((sel)=>parseSelector(sel)).join(\",\") : null;\n    };\n    const SelectorEngine = {\n        find (selector) {\n            let element = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : document.documentElement;\n            return [].concat(...Element.prototype.querySelectorAll.call(element, selector));\n        },\n        findOne (selector) {\n            let element = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : document.documentElement;\n            return Element.prototype.querySelector.call(element, selector);\n        },\n        children (element, selector) {\n            return [].concat(...element.children).filter((child)=>child.matches(selector));\n        },\n        parents (element, selector) {\n            const parents = [];\n            let ancestor = element.parentNode.closest(selector);\n            while(ancestor){\n                parents.push(ancestor);\n                ancestor = ancestor.parentNode.closest(selector);\n            }\n            return parents;\n        },\n        prev (element, selector) {\n            let previous = element.previousElementSibling;\n            while(previous){\n                if (previous.matches(selector)) {\n                    return [\n                        previous\n                    ];\n                }\n                previous = previous.previousElementSibling;\n            }\n            return [];\n        },\n        // TODO: this is now unused; remove later along with prev()\n        next (element, selector) {\n            let next = element.nextElementSibling;\n            while(next){\n                if (next.matches(selector)) {\n                    return [\n                        next\n                    ];\n                }\n                next = next.nextElementSibling;\n            }\n            return [];\n        },\n        focusableChildren (element) {\n            const focusables = [\n                \"a\",\n                \"button\",\n                \"input\",\n                \"textarea\",\n                \"select\",\n                \"details\",\n                \"[tabindex]\",\n                '[contenteditable=\"true\"]'\n            ].map((selector)=>\"\".concat(selector, ':not([tabindex^=\"-\"])')).join(\",\");\n            return this.find(focusables, element).filter((el)=>!isDisabled(el) && isVisible(el));\n        },\n        getSelectorFromElement (element) {\n            const selector = getSelector(element);\n            if (selector) {\n                return SelectorEngine.findOne(selector) ? selector : null;\n            }\n            return null;\n        },\n        getElementFromSelector (element) {\n            const selector = getSelector(element);\n            return selector ? SelectorEngine.findOne(selector) : null;\n        },\n        getMultipleElementsFromSelector (element) {\n            const selector = getSelector(element);\n            return selector ? SelectorEngine.find(selector) : [];\n        }\n    };\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap util/component-functions.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ const enableDismissTrigger = function(component) {\n        let method = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"hide\";\n        const clickEvent = \"click.dismiss\".concat(component.EVENT_KEY);\n        const name = component.NAME;\n        EventHandler.on(document, clickEvent, '[data-bs-dismiss=\"'.concat(name, '\"]'), function(event) {\n            if ([\n                \"A\",\n                \"AREA\"\n            ].includes(this.tagName)) {\n                event.preventDefault();\n            }\n            if (isDisabled(this)) {\n                return;\n            }\n            const target = SelectorEngine.getElementFromSelector(this) || this.closest(\".\".concat(name));\n            const instance = component.getOrCreateInstance(target);\n            // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method\n            instance[method]();\n        });\n    };\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap alert.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$f = \"alert\";\n    const DATA_KEY$a = \"bs.alert\";\n    const EVENT_KEY$b = \".\".concat(DATA_KEY$a);\n    const EVENT_CLOSE = \"close\".concat(EVENT_KEY$b);\n    const EVENT_CLOSED = \"closed\".concat(EVENT_KEY$b);\n    const CLASS_NAME_FADE$5 = \"fade\";\n    const CLASS_NAME_SHOW$8 = \"show\";\n    /**\n   * Class definition\n   */ class Alert extends BaseComponent {\n        // Getters\n        static get NAME() {\n            return NAME$f;\n        }\n        // Public\n        close() {\n            const closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);\n            if (closeEvent.defaultPrevented) {\n                return;\n            }\n            this._element.classList.remove(CLASS_NAME_SHOW$8);\n            const isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);\n            this._queueCallback(()=>this._destroyElement(), this._element, isAnimated);\n        }\n        // Private\n        _destroyElement() {\n            this._element.remove();\n            EventHandler.trigger(this._element, EVENT_CLOSED);\n            this.dispose();\n        }\n        // Static\n        static jQueryInterface(config) {\n            return this.each(function() {\n                const data = Alert.getOrCreateInstance(this);\n                if (typeof config !== \"string\") {\n                    return;\n                }\n                if (data[config] === undefined || config.startsWith(\"_\") || config === \"constructor\") {\n                    throw new TypeError('No method named \"'.concat(config, '\"'));\n                }\n                data[config](this);\n            });\n        }\n    }\n    /**\n   * Data API implementation\n   */ enableDismissTrigger(Alert, \"close\");\n    /**\n   * jQuery\n   */ defineJQueryPlugin(Alert);\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap button.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$e = \"button\";\n    const DATA_KEY$9 = \"bs.button\";\n    const EVENT_KEY$a = \".\".concat(DATA_KEY$9);\n    const DATA_API_KEY$6 = \".data-api\";\n    const CLASS_NAME_ACTIVE$3 = \"active\";\n    const SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle=\"button\"]';\n    const EVENT_CLICK_DATA_API$6 = \"click\".concat(EVENT_KEY$a).concat(DATA_API_KEY$6);\n    /**\n   * Class definition\n   */ class Button extends BaseComponent {\n        // Getters\n        static get NAME() {\n            return NAME$e;\n        }\n        // Public\n        toggle() {\n            // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method\n            this._element.setAttribute(\"aria-pressed\", this._element.classList.toggle(CLASS_NAME_ACTIVE$3));\n        }\n        // Static\n        static jQueryInterface(config) {\n            return this.each(function() {\n                const data = Button.getOrCreateInstance(this);\n                if (config === \"toggle\") {\n                    data[config]();\n                }\n            });\n        }\n    }\n    /**\n   * Data API implementation\n   */ EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, (event)=>{\n        event.preventDefault();\n        const button = event.target.closest(SELECTOR_DATA_TOGGLE$5);\n        const data = Button.getOrCreateInstance(button);\n        data.toggle();\n    });\n    /**\n   * jQuery\n   */ defineJQueryPlugin(Button);\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap util/swipe.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$d = \"swipe\";\n    const EVENT_KEY$9 = \".bs.swipe\";\n    const EVENT_TOUCHSTART = \"touchstart\".concat(EVENT_KEY$9);\n    const EVENT_TOUCHMOVE = \"touchmove\".concat(EVENT_KEY$9);\n    const EVENT_TOUCHEND = \"touchend\".concat(EVENT_KEY$9);\n    const EVENT_POINTERDOWN = \"pointerdown\".concat(EVENT_KEY$9);\n    const EVENT_POINTERUP = \"pointerup\".concat(EVENT_KEY$9);\n    const POINTER_TYPE_TOUCH = \"touch\";\n    const POINTER_TYPE_PEN = \"pen\";\n    const CLASS_NAME_POINTER_EVENT = \"pointer-event\";\n    const SWIPE_THRESHOLD = 40;\n    const Default$c = {\n        endCallback: null,\n        leftCallback: null,\n        rightCallback: null\n    };\n    const DefaultType$c = {\n        endCallback: \"(function|null)\",\n        leftCallback: \"(function|null)\",\n        rightCallback: \"(function|null)\"\n    };\n    /**\n   * Class definition\n   */ class Swipe extends Config {\n        // Getters\n        static get Default() {\n            return Default$c;\n        }\n        static get DefaultType() {\n            return DefaultType$c;\n        }\n        static get NAME() {\n            return NAME$d;\n        }\n        // Public\n        dispose() {\n            EventHandler.off(this._element, EVENT_KEY$9);\n        }\n        // Private\n        _start(event) {\n            if (!this._supportPointerEvents) {\n                this._deltaX = event.touches[0].clientX;\n                return;\n            }\n            if (this._eventIsPointerPenTouch(event)) {\n                this._deltaX = event.clientX;\n            }\n        }\n        _end(event) {\n            if (this._eventIsPointerPenTouch(event)) {\n                this._deltaX = event.clientX - this._deltaX;\n            }\n            this._handleSwipe();\n            execute(this._config.endCallback);\n        }\n        _move(event) {\n            this._deltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - this._deltaX;\n        }\n        _handleSwipe() {\n            const absDeltaX = Math.abs(this._deltaX);\n            if (absDeltaX <= SWIPE_THRESHOLD) {\n                return;\n            }\n            const direction = absDeltaX / this._deltaX;\n            this._deltaX = 0;\n            if (!direction) {\n                return;\n            }\n            execute(direction > 0 ? this._config.rightCallback : this._config.leftCallback);\n        }\n        _initEvents() {\n            if (this._supportPointerEvents) {\n                EventHandler.on(this._element, EVENT_POINTERDOWN, (event)=>this._start(event));\n                EventHandler.on(this._element, EVENT_POINTERUP, (event)=>this._end(event));\n                this._element.classList.add(CLASS_NAME_POINTER_EVENT);\n            } else {\n                EventHandler.on(this._element, EVENT_TOUCHSTART, (event)=>this._start(event));\n                EventHandler.on(this._element, EVENT_TOUCHMOVE, (event)=>this._move(event));\n                EventHandler.on(this._element, EVENT_TOUCHEND, (event)=>this._end(event));\n            }\n        }\n        _eventIsPointerPenTouch(event) {\n            return this._supportPointerEvents && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);\n        }\n        // Static\n        static isSupported() {\n            return \"ontouchstart\" in document.documentElement || navigator.maxTouchPoints > 0;\n        }\n        constructor(element, config){\n            super();\n            this._element = element;\n            if (!element || !Swipe.isSupported()) {\n                return;\n            }\n            this._config = this._getConfig(config);\n            this._deltaX = 0;\n            this._supportPointerEvents = Boolean(window.PointerEvent);\n            this._initEvents();\n        }\n    }\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap carousel.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$c = \"carousel\";\n    const DATA_KEY$8 = \"bs.carousel\";\n    const EVENT_KEY$8 = \".\".concat(DATA_KEY$8);\n    const DATA_API_KEY$5 = \".data-api\";\n    const ARROW_LEFT_KEY$1 = \"ArrowLeft\";\n    const ARROW_RIGHT_KEY$1 = \"ArrowRight\";\n    const TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch\n    const ORDER_NEXT = \"next\";\n    const ORDER_PREV = \"prev\";\n    const DIRECTION_LEFT = \"left\";\n    const DIRECTION_RIGHT = \"right\";\n    const EVENT_SLIDE = \"slide\".concat(EVENT_KEY$8);\n    const EVENT_SLID = \"slid\".concat(EVENT_KEY$8);\n    const EVENT_KEYDOWN$1 = \"keydown\".concat(EVENT_KEY$8);\n    const EVENT_MOUSEENTER$1 = \"mouseenter\".concat(EVENT_KEY$8);\n    const EVENT_MOUSELEAVE$1 = \"mouseleave\".concat(EVENT_KEY$8);\n    const EVENT_DRAG_START = \"dragstart\".concat(EVENT_KEY$8);\n    const EVENT_LOAD_DATA_API$3 = \"load\".concat(EVENT_KEY$8).concat(DATA_API_KEY$5);\n    const EVENT_CLICK_DATA_API$5 = \"click\".concat(EVENT_KEY$8).concat(DATA_API_KEY$5);\n    const CLASS_NAME_CAROUSEL = \"carousel\";\n    const CLASS_NAME_ACTIVE$2 = \"active\";\n    const CLASS_NAME_SLIDE = \"slide\";\n    const CLASS_NAME_END = \"carousel-item-end\";\n    const CLASS_NAME_START = \"carousel-item-start\";\n    const CLASS_NAME_NEXT = \"carousel-item-next\";\n    const CLASS_NAME_PREV = \"carousel-item-prev\";\n    const SELECTOR_ACTIVE = \".active\";\n    const SELECTOR_ITEM = \".carousel-item\";\n    const SELECTOR_ACTIVE_ITEM = SELECTOR_ACTIVE + SELECTOR_ITEM;\n    const SELECTOR_ITEM_IMG = \".carousel-item img\";\n    const SELECTOR_INDICATORS = \".carousel-indicators\";\n    const SELECTOR_DATA_SLIDE = \"[data-bs-slide], [data-bs-slide-to]\";\n    const SELECTOR_DATA_RIDE = '[data-bs-ride=\"carousel\"]';\n    const KEY_TO_DIRECTION = {\n        [ARROW_LEFT_KEY$1]: DIRECTION_RIGHT,\n        [ARROW_RIGHT_KEY$1]: DIRECTION_LEFT\n    };\n    const Default$b = {\n        interval: 5000,\n        keyboard: true,\n        pause: \"hover\",\n        ride: false,\n        touch: true,\n        wrap: true\n    };\n    const DefaultType$b = {\n        interval: \"(number|boolean)\",\n        // TODO:v6 remove boolean support\n        keyboard: \"boolean\",\n        pause: \"(string|boolean)\",\n        ride: \"(boolean|string)\",\n        touch: \"boolean\",\n        wrap: \"boolean\"\n    };\n    /**\n   * Class definition\n   */ class Carousel extends BaseComponent {\n        // Getters\n        static get Default() {\n            return Default$b;\n        }\n        static get DefaultType() {\n            return DefaultType$b;\n        }\n        static get NAME() {\n            return NAME$c;\n        }\n        // Public\n        next() {\n            this._slide(ORDER_NEXT);\n        }\n        nextWhenVisible() {\n            // FIXME TODO use `document.visibilityState`\n            // Don't call next when the page isn't visible\n            // or the carousel or its parent isn't visible\n            if (!document.hidden && isVisible(this._element)) {\n                this.next();\n            }\n        }\n        prev() {\n            this._slide(ORDER_PREV);\n        }\n        pause() {\n            if (this._isSliding) {\n                triggerTransitionEnd(this._element);\n            }\n            this._clearInterval();\n        }\n        cycle() {\n            this._clearInterval();\n            this._updateInterval();\n            this._interval = setInterval(()=>this.nextWhenVisible(), this._config.interval);\n        }\n        _maybeEnableCycle() {\n            if (!this._config.ride) {\n                return;\n            }\n            if (this._isSliding) {\n                EventHandler.one(this._element, EVENT_SLID, ()=>this.cycle());\n                return;\n            }\n            this.cycle();\n        }\n        to(index) {\n            const items = this._getItems();\n            if (index > items.length - 1 || index < 0) {\n                return;\n            }\n            if (this._isSliding) {\n                EventHandler.one(this._element, EVENT_SLID, ()=>this.to(index));\n                return;\n            }\n            const activeIndex = this._getItemIndex(this._getActive());\n            if (activeIndex === index) {\n                return;\n            }\n            const order = index > activeIndex ? ORDER_NEXT : ORDER_PREV;\n            this._slide(order, items[index]);\n        }\n        dispose() {\n            if (this._swipeHelper) {\n                this._swipeHelper.dispose();\n            }\n            super.dispose();\n        }\n        // Private\n        _configAfterMerge(config) {\n            config.defaultInterval = config.interval;\n            return config;\n        }\n        _addEventListeners() {\n            if (this._config.keyboard) {\n                EventHandler.on(this._element, EVENT_KEYDOWN$1, (event)=>this._keydown(event));\n            }\n            if (this._config.pause === \"hover\") {\n                EventHandler.on(this._element, EVENT_MOUSEENTER$1, ()=>this.pause());\n                EventHandler.on(this._element, EVENT_MOUSELEAVE$1, ()=>this._maybeEnableCycle());\n            }\n            if (this._config.touch && Swipe.isSupported()) {\n                this._addTouchEventListeners();\n            }\n        }\n        _addTouchEventListeners() {\n            for (const img of SelectorEngine.find(SELECTOR_ITEM_IMG, this._element)){\n                EventHandler.on(img, EVENT_DRAG_START, (event)=>event.preventDefault());\n            }\n            const endCallBack = ()=>{\n                if (this._config.pause !== \"hover\") {\n                    return;\n                }\n                // If it's a touch-enabled device, mouseenter/leave are fired as\n                // part of the mouse compatibility events on first tap - the carousel\n                // would stop cycling until user tapped out of it;\n                // here, we listen for touchend, explicitly pause the carousel\n                // (as if it's the second time we tap on it, mouseenter compat event\n                // is NOT fired) and after a timeout (to allow for mouse compatibility\n                // events to fire) we explicitly restart cycling\n                this.pause();\n                if (this.touchTimeout) {\n                    clearTimeout(this.touchTimeout);\n                }\n                this.touchTimeout = setTimeout(()=>this._maybeEnableCycle(), TOUCHEVENT_COMPAT_WAIT + this._config.interval);\n            };\n            const swipeConfig = {\n                leftCallback: ()=>this._slide(this._directionToOrder(DIRECTION_LEFT)),\n                rightCallback: ()=>this._slide(this._directionToOrder(DIRECTION_RIGHT)),\n                endCallback: endCallBack\n            };\n            this._swipeHelper = new Swipe(this._element, swipeConfig);\n        }\n        _keydown(event) {\n            if (/input|textarea/i.test(event.target.tagName)) {\n                return;\n            }\n            const direction = KEY_TO_DIRECTION[event.key];\n            if (direction) {\n                event.preventDefault();\n                this._slide(this._directionToOrder(direction));\n            }\n        }\n        _getItemIndex(element) {\n            return this._getItems().indexOf(element);\n        }\n        _setActiveIndicatorElement(index) {\n            if (!this._indicatorsElement) {\n                return;\n            }\n            const activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE, this._indicatorsElement);\n            activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);\n            activeIndicator.removeAttribute(\"aria-current\");\n            const newActiveIndicator = SelectorEngine.findOne('[data-bs-slide-to=\"'.concat(index, '\"]'), this._indicatorsElement);\n            if (newActiveIndicator) {\n                newActiveIndicator.classList.add(CLASS_NAME_ACTIVE$2);\n                newActiveIndicator.setAttribute(\"aria-current\", \"true\");\n            }\n        }\n        _updateInterval() {\n            const element = this._activeElement || this._getActive();\n            if (!element) {\n                return;\n            }\n            const elementInterval = Number.parseInt(element.getAttribute(\"data-bs-interval\"), 10);\n            this._config.interval = elementInterval || this._config.defaultInterval;\n        }\n        _slide(order) {\n            let element = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;\n            if (this._isSliding) {\n                return;\n            }\n            const activeElement = this._getActive();\n            const isNext = order === ORDER_NEXT;\n            const nextElement = element || getNextActiveElement(this._getItems(), activeElement, isNext, this._config.wrap);\n            if (nextElement === activeElement) {\n                return;\n            }\n            const nextElementIndex = this._getItemIndex(nextElement);\n            const triggerEvent = (eventName)=>{\n                return EventHandler.trigger(this._element, eventName, {\n                    relatedTarget: nextElement,\n                    direction: this._orderToDirection(order),\n                    from: this._getItemIndex(activeElement),\n                    to: nextElementIndex\n                });\n            };\n            const slideEvent = triggerEvent(EVENT_SLIDE);\n            if (slideEvent.defaultPrevented) {\n                return;\n            }\n            if (!activeElement || !nextElement) {\n                // Some weirdness is happening, so we bail\n                // TODO: change tests that use empty divs to avoid this check\n                return;\n            }\n            const isCycling = Boolean(this._interval);\n            this.pause();\n            this._isSliding = true;\n            this._setActiveIndicatorElement(nextElementIndex);\n            this._activeElement = nextElement;\n            const directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;\n            const orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;\n            nextElement.classList.add(orderClassName);\n            reflow(nextElement);\n            activeElement.classList.add(directionalClassName);\n            nextElement.classList.add(directionalClassName);\n            const completeCallBack = ()=>{\n                nextElement.classList.remove(directionalClassName, orderClassName);\n                nextElement.classList.add(CLASS_NAME_ACTIVE$2);\n                activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);\n                this._isSliding = false;\n                triggerEvent(EVENT_SLID);\n            };\n            this._queueCallback(completeCallBack, activeElement, this._isAnimated());\n            if (isCycling) {\n                this.cycle();\n            }\n        }\n        _isAnimated() {\n            return this._element.classList.contains(CLASS_NAME_SLIDE);\n        }\n        _getActive() {\n            return SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);\n        }\n        _getItems() {\n            return SelectorEngine.find(SELECTOR_ITEM, this._element);\n        }\n        _clearInterval() {\n            if (this._interval) {\n                clearInterval(this._interval);\n                this._interval = null;\n            }\n        }\n        _directionToOrder(direction) {\n            if (isRTL()) {\n                return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;\n            }\n            return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;\n        }\n        _orderToDirection(order) {\n            if (isRTL()) {\n                return order === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;\n            }\n            return order === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;\n        }\n        // Static\n        static jQueryInterface(config) {\n            return this.each(function() {\n                const data = Carousel.getOrCreateInstance(this, config);\n                if (typeof config === \"number\") {\n                    data.to(config);\n                    return;\n                }\n                if (typeof config === \"string\") {\n                    if (data[config] === undefined || config.startsWith(\"_\") || config === \"constructor\") {\n                        throw new TypeError('No method named \"'.concat(config, '\"'));\n                    }\n                    data[config]();\n                }\n            });\n        }\n        constructor(element, config){\n            super(element, config);\n            this._interval = null;\n            this._activeElement = null;\n            this._isSliding = false;\n            this.touchTimeout = null;\n            this._swipeHelper = null;\n            this._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, this._element);\n            this._addEventListeners();\n            if (this._config.ride === CLASS_NAME_CAROUSEL) {\n                this.cycle();\n            }\n        }\n    }\n    /**\n   * Data API implementation\n   */ EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, function(event) {\n        const target = SelectorEngine.getElementFromSelector(this);\n        if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {\n            return;\n        }\n        event.preventDefault();\n        const carousel = Carousel.getOrCreateInstance(target);\n        const slideIndex = this.getAttribute(\"data-bs-slide-to\");\n        if (slideIndex) {\n            carousel.to(slideIndex);\n            carousel._maybeEnableCycle();\n            return;\n        }\n        if (Manipulator.getDataAttribute(this, \"slide\") === \"next\") {\n            carousel.next();\n            carousel._maybeEnableCycle();\n            return;\n        }\n        carousel.prev();\n        carousel._maybeEnableCycle();\n    });\n    EventHandler.on(window, EVENT_LOAD_DATA_API$3, ()=>{\n        const carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);\n        for (const carousel of carousels){\n            Carousel.getOrCreateInstance(carousel);\n        }\n    });\n    /**\n   * jQuery\n   */ defineJQueryPlugin(Carousel);\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap collapse.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$b = \"collapse\";\n    const DATA_KEY$7 = \"bs.collapse\";\n    const EVENT_KEY$7 = \".\".concat(DATA_KEY$7);\n    const DATA_API_KEY$4 = \".data-api\";\n    const EVENT_SHOW$6 = \"show\".concat(EVENT_KEY$7);\n    const EVENT_SHOWN$6 = \"shown\".concat(EVENT_KEY$7);\n    const EVENT_HIDE$6 = \"hide\".concat(EVENT_KEY$7);\n    const EVENT_HIDDEN$6 = \"hidden\".concat(EVENT_KEY$7);\n    const EVENT_CLICK_DATA_API$4 = \"click\".concat(EVENT_KEY$7).concat(DATA_API_KEY$4);\n    const CLASS_NAME_SHOW$7 = \"show\";\n    const CLASS_NAME_COLLAPSE = \"collapse\";\n    const CLASS_NAME_COLLAPSING = \"collapsing\";\n    const CLASS_NAME_COLLAPSED = \"collapsed\";\n    const CLASS_NAME_DEEPER_CHILDREN = \":scope .\".concat(CLASS_NAME_COLLAPSE, \" .\").concat(CLASS_NAME_COLLAPSE);\n    const CLASS_NAME_HORIZONTAL = \"collapse-horizontal\";\n    const WIDTH = \"width\";\n    const HEIGHT = \"height\";\n    const SELECTOR_ACTIVES = \".collapse.show, .collapse.collapsing\";\n    const SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle=\"collapse\"]';\n    const Default$a = {\n        parent: null,\n        toggle: true\n    };\n    const DefaultType$a = {\n        parent: \"(null|element)\",\n        toggle: \"boolean\"\n    };\n    /**\n   * Class definition\n   */ class Collapse extends BaseComponent {\n        // Getters\n        static get Default() {\n            return Default$a;\n        }\n        static get DefaultType() {\n            return DefaultType$a;\n        }\n        static get NAME() {\n            return NAME$b;\n        }\n        // Public\n        toggle() {\n            if (this._isShown()) {\n                this.hide();\n            } else {\n                this.show();\n            }\n        }\n        show() {\n            if (this._isTransitioning || this._isShown()) {\n                return;\n            }\n            let activeChildren = [];\n            // find active children\n            if (this._config.parent) {\n                activeChildren = this._getFirstLevelChildren(SELECTOR_ACTIVES).filter((element)=>element !== this._element).map((element)=>Collapse.getOrCreateInstance(element, {\n                        toggle: false\n                    }));\n            }\n            if (activeChildren.length && activeChildren[0]._isTransitioning) {\n                return;\n            }\n            const startEvent = EventHandler.trigger(this._element, EVENT_SHOW$6);\n            if (startEvent.defaultPrevented) {\n                return;\n            }\n            for (const activeInstance of activeChildren){\n                activeInstance.hide();\n            }\n            const dimension = this._getDimension();\n            this._element.classList.remove(CLASS_NAME_COLLAPSE);\n            this._element.classList.add(CLASS_NAME_COLLAPSING);\n            this._element.style[dimension] = 0;\n            this._addAriaAndCollapsedClass(this._triggerArray, true);\n            this._isTransitioning = true;\n            const complete = ()=>{\n                this._isTransitioning = false;\n                this._element.classList.remove(CLASS_NAME_COLLAPSING);\n                this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);\n                this._element.style[dimension] = \"\";\n                EventHandler.trigger(this._element, EVENT_SHOWN$6);\n            };\n            const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);\n            const scrollSize = \"scroll\".concat(capitalizedDimension);\n            this._queueCallback(complete, this._element, true);\n            this._element.style[dimension] = \"\".concat(this._element[scrollSize], \"px\");\n        }\n        hide() {\n            if (this._isTransitioning || !this._isShown()) {\n                return;\n            }\n            const startEvent = EventHandler.trigger(this._element, EVENT_HIDE$6);\n            if (startEvent.defaultPrevented) {\n                return;\n            }\n            const dimension = this._getDimension();\n            this._element.style[dimension] = \"\".concat(this._element.getBoundingClientRect()[dimension], \"px\");\n            reflow(this._element);\n            this._element.classList.add(CLASS_NAME_COLLAPSING);\n            this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);\n            for (const trigger of this._triggerArray){\n                const element = SelectorEngine.getElementFromSelector(trigger);\n                if (element && !this._isShown(element)) {\n                    this._addAriaAndCollapsedClass([\n                        trigger\n                    ], false);\n                }\n            }\n            this._isTransitioning = true;\n            const complete = ()=>{\n                this._isTransitioning = false;\n                this._element.classList.remove(CLASS_NAME_COLLAPSING);\n                this._element.classList.add(CLASS_NAME_COLLAPSE);\n                EventHandler.trigger(this._element, EVENT_HIDDEN$6);\n            };\n            this._element.style[dimension] = \"\";\n            this._queueCallback(complete, this._element, true);\n        }\n        _isShown() {\n            let element = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this._element;\n            return element.classList.contains(CLASS_NAME_SHOW$7);\n        }\n        // Private\n        _configAfterMerge(config) {\n            config.toggle = Boolean(config.toggle); // Coerce string values\n            config.parent = getElement(config.parent);\n            return config;\n        }\n        _getDimension() {\n            return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;\n        }\n        _initializeChildren() {\n            if (!this._config.parent) {\n                return;\n            }\n            const children = this._getFirstLevelChildren(SELECTOR_DATA_TOGGLE$4);\n            for (const element of children){\n                const selected = SelectorEngine.getElementFromSelector(element);\n                if (selected) {\n                    this._addAriaAndCollapsedClass([\n                        element\n                    ], this._isShown(selected));\n                }\n            }\n        }\n        _getFirstLevelChildren(selector) {\n            const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);\n            // remove children if greater depth\n            return SelectorEngine.find(selector, this._config.parent).filter((element)=>!children.includes(element));\n        }\n        _addAriaAndCollapsedClass(triggerArray, isOpen) {\n            if (!triggerArray.length) {\n                return;\n            }\n            for (const element of triggerArray){\n                element.classList.toggle(CLASS_NAME_COLLAPSED, !isOpen);\n                element.setAttribute(\"aria-expanded\", isOpen);\n            }\n        }\n        // Static\n        static jQueryInterface(config) {\n            const _config = {};\n            if (typeof config === \"string\" && /show|hide/.test(config)) {\n                _config.toggle = false;\n            }\n            return this.each(function() {\n                const data = Collapse.getOrCreateInstance(this, _config);\n                if (typeof config === \"string\") {\n                    if (typeof data[config] === \"undefined\") {\n                        throw new TypeError('No method named \"'.concat(config, '\"'));\n                    }\n                    data[config]();\n                }\n            });\n        }\n        constructor(element, config){\n            super(element, config);\n            this._isTransitioning = false;\n            this._triggerArray = [];\n            const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);\n            for (const elem of toggleList){\n                const selector = SelectorEngine.getSelectorFromElement(elem);\n                const filterElement = SelectorEngine.find(selector).filter((foundElement)=>foundElement === this._element);\n                if (selector !== null && filterElement.length) {\n                    this._triggerArray.push(elem);\n                }\n            }\n            this._initializeChildren();\n            if (!this._config.parent) {\n                this._addAriaAndCollapsedClass(this._triggerArray, this._isShown());\n            }\n            if (this._config.toggle) {\n                this.toggle();\n            }\n        }\n    }\n    /**\n   * Data API implementation\n   */ EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function(event) {\n        // preventDefault only for <a> elements (which change the URL) not inside the collapsible element\n        if (event.target.tagName === \"A\" || event.delegateTarget && event.delegateTarget.tagName === \"A\") {\n            event.preventDefault();\n        }\n        for (const element of SelectorEngine.getMultipleElementsFromSelector(this)){\n            Collapse.getOrCreateInstance(element, {\n                toggle: false\n            }).toggle();\n        }\n    });\n    /**\n   * jQuery\n   */ defineJQueryPlugin(Collapse);\n    var top = \"top\";\n    var bottom = \"bottom\";\n    var right = \"right\";\n    var left = \"left\";\n    var auto = \"auto\";\n    var basePlacements = [\n        top,\n        bottom,\n        right,\n        left\n    ];\n    var start = \"start\";\n    var end = \"end\";\n    var clippingParents = \"clippingParents\";\n    var viewport = \"viewport\";\n    var popper = \"popper\";\n    var reference = \"reference\";\n    var variationPlacements = /*#__PURE__*/ basePlacements.reduce(function(acc, placement) {\n        return acc.concat([\n            placement + \"-\" + start,\n            placement + \"-\" + end\n        ]);\n    }, []);\n    var placements = /*#__PURE__*/ [].concat(basePlacements, [\n        auto\n    ]).reduce(function(acc, placement) {\n        return acc.concat([\n            placement,\n            placement + \"-\" + start,\n            placement + \"-\" + end\n        ]);\n    }, []); // modifiers that need to read the DOM\n    var beforeRead = \"beforeRead\";\n    var read = \"read\";\n    var afterRead = \"afterRead\"; // pure-logic modifiers\n    var beforeMain = \"beforeMain\";\n    var main = \"main\";\n    var afterMain = \"afterMain\"; // modifier with the purpose to write to the DOM (or write into a framework state)\n    var beforeWrite = \"beforeWrite\";\n    var write = \"write\";\n    var afterWrite = \"afterWrite\";\n    var modifierPhases = [\n        beforeRead,\n        read,\n        afterRead,\n        beforeMain,\n        main,\n        afterMain,\n        beforeWrite,\n        write,\n        afterWrite\n    ];\n    function getNodeName(element) {\n        return element ? (element.nodeName || \"\").toLowerCase() : null;\n    }\n    function getWindow(node) {\n        if (node == null) {\n            return window;\n        }\n        if (node.toString() !== \"[object Window]\") {\n            var ownerDocument = node.ownerDocument;\n            return ownerDocument ? ownerDocument.defaultView || window : window;\n        }\n        return node;\n    }\n    function isElement(node) {\n        var OwnElement = getWindow(node).Element;\n        return node instanceof OwnElement || node instanceof Element;\n    }\n    function isHTMLElement(node) {\n        var OwnElement = getWindow(node).HTMLElement;\n        return node instanceof OwnElement || node instanceof HTMLElement;\n    }\n    function isShadowRoot(node) {\n        // IE 11 has no ShadowRoot\n        if (typeof ShadowRoot === \"undefined\") {\n            return false;\n        }\n        var OwnElement = getWindow(node).ShadowRoot;\n        return node instanceof OwnElement || node instanceof ShadowRoot;\n    }\n    // and applies them to the HTMLElements such as popper and arrow\n    function applyStyles(_ref) {\n        var state = _ref.state;\n        Object.keys(state.elements).forEach(function(name) {\n            var style = state.styles[name] || {};\n            var attributes = state.attributes[name] || {};\n            var element = state.elements[name]; // arrow is optional + virtual elements\n            if (!isHTMLElement(element) || !getNodeName(element)) {\n                return;\n            } // Flow doesn't support to extend this property, but it's the most\n            // effective way to apply styles to an HTMLElement\n            // $FlowFixMe[cannot-write]\n            Object.assign(element.style, style);\n            Object.keys(attributes).forEach(function(name) {\n                var value = attributes[name];\n                if (value === false) {\n                    element.removeAttribute(name);\n                } else {\n                    element.setAttribute(name, value === true ? \"\" : value);\n                }\n            });\n        });\n    }\n    function effect$2(_ref2) {\n        var state = _ref2.state;\n        var initialStyles = {\n            popper: {\n                position: state.options.strategy,\n                left: \"0\",\n                top: \"0\",\n                margin: \"0\"\n            },\n            arrow: {\n                position: \"absolute\"\n            },\n            reference: {}\n        };\n        Object.assign(state.elements.popper.style, initialStyles.popper);\n        state.styles = initialStyles;\n        if (state.elements.arrow) {\n            Object.assign(state.elements.arrow.style, initialStyles.arrow);\n        }\n        return function() {\n            Object.keys(state.elements).forEach(function(name) {\n                var element = state.elements[name];\n                var attributes = state.attributes[name] || {};\n                var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them\n                var style = styleProperties.reduce(function(style, property) {\n                    style[property] = \"\";\n                    return style;\n                }, {}); // arrow is optional + virtual elements\n                if (!isHTMLElement(element) || !getNodeName(element)) {\n                    return;\n                }\n                Object.assign(element.style, style);\n                Object.keys(attributes).forEach(function(attribute) {\n                    element.removeAttribute(attribute);\n                });\n            });\n        };\n    } // eslint-disable-next-line import/no-unused-modules\n    const applyStyles$1 = {\n        name: \"applyStyles\",\n        enabled: true,\n        phase: \"write\",\n        fn: applyStyles,\n        effect: effect$2,\n        requires: [\n            \"computeStyles\"\n        ]\n    };\n    function getBasePlacement(placement) {\n        return placement.split(\"-\")[0];\n    }\n    var max = Math.max;\n    var min = Math.min;\n    var round = Math.round;\n    function getUAString() {\n        var uaData = navigator.userAgentData;\n        if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {\n            return uaData.brands.map(function(item) {\n                return item.brand + \"/\" + item.version;\n            }).join(\" \");\n        }\n        return navigator.userAgent;\n    }\n    function isLayoutViewport() {\n        return !/^((?!chrome|android).)*safari/i.test(getUAString());\n    }\n    function getBoundingClientRect(element, includeScale, isFixedStrategy) {\n        if (includeScale === void 0) {\n            includeScale = false;\n        }\n        if (isFixedStrategy === void 0) {\n            isFixedStrategy = false;\n        }\n        var clientRect = element.getBoundingClientRect();\n        var scaleX = 1;\n        var scaleY = 1;\n        if (includeScale && isHTMLElement(element)) {\n            scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;\n            scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;\n        }\n        var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;\n        var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;\n        var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;\n        var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;\n        var width = clientRect.width / scaleX;\n        var height = clientRect.height / scaleY;\n        return {\n            width: width,\n            height: height,\n            top: y,\n            right: x + width,\n            bottom: y + height,\n            left: x,\n            x: x,\n            y: y\n        };\n    }\n    // means it doesn't take into account transforms.\n    function getLayoutRect(element) {\n        var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.\n        // Fixes https://github.com/popperjs/popper-core/issues/1223\n        var width = element.offsetWidth;\n        var height = element.offsetHeight;\n        if (Math.abs(clientRect.width - width) <= 1) {\n            width = clientRect.width;\n        }\n        if (Math.abs(clientRect.height - height) <= 1) {\n            height = clientRect.height;\n        }\n        return {\n            x: element.offsetLeft,\n            y: element.offsetTop,\n            width: width,\n            height: height\n        };\n    }\n    function contains(parent, child) {\n        var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method\n        if (parent.contains(child)) {\n            return true;\n        } else if (rootNode && isShadowRoot(rootNode)) {\n            var next = child;\n            do {\n                if (next && parent.isSameNode(next)) {\n                    return true;\n                } // $FlowFixMe[prop-missing]: need a better way to handle this...\n                next = next.parentNode || next.host;\n            }while (next);\n        } // Give up, the result is false\n        return false;\n    }\n    function getComputedStyle$1(element) {\n        return getWindow(element).getComputedStyle(element);\n    }\n    function isTableElement(element) {\n        return [\n            \"table\",\n            \"td\",\n            \"th\"\n        ].indexOf(getNodeName(element)) >= 0;\n    }\n    function getDocumentElement(element) {\n        // $FlowFixMe[incompatible-return]: assume body is always available\n        return ((isElement(element) ? element.ownerDocument : element.document) || window.document).documentElement;\n    }\n    function getParentNode(element) {\n        if (getNodeName(element) === \"html\") {\n            return element;\n        }\n        return(// $FlowFixMe[incompatible-return]\n        // $FlowFixMe[prop-missing]\n        element.assignedSlot || // step into the shadow DOM of the parent of a slotted node\n        element.parentNode || (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected\n        // $FlowFixMe[incompatible-call]: HTMLElement is a Node\n        getDocumentElement(element) // fallback\n        );\n    }\n    function getTrueOffsetParent(element) {\n        if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837\n        getComputedStyle$1(element).position === \"fixed\") {\n            return null;\n        }\n        return element.offsetParent;\n    } // `.offsetParent` reports `null` for fixed elements, while absolute elements\n    // return the containing block\n    function getContainingBlock(element) {\n        var isFirefox = /firefox/i.test(getUAString());\n        var isIE = /Trident/i.test(getUAString());\n        if (isIE && isHTMLElement(element)) {\n            // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport\n            var elementCss = getComputedStyle$1(element);\n            if (elementCss.position === \"fixed\") {\n                return null;\n            }\n        }\n        var currentNode = getParentNode(element);\n        if (isShadowRoot(currentNode)) {\n            currentNode = currentNode.host;\n        }\n        while(isHTMLElement(currentNode) && [\n            \"html\",\n            \"body\"\n        ].indexOf(getNodeName(currentNode)) < 0){\n            var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that\n            // create a containing block.\n            // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n            if (css.transform !== \"none\" || css.perspective !== \"none\" || css.contain === \"paint\" || [\n                \"transform\",\n                \"perspective\"\n            ].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === \"filter\" || isFirefox && css.filter && css.filter !== \"none\") {\n                return currentNode;\n            } else {\n                currentNode = currentNode.parentNode;\n            }\n        }\n        return null;\n    } // Gets the closest ancestor positioned element. Handles some edge cases,\n    // such as table ancestors and cross browser bugs.\n    function getOffsetParent(element) {\n        var window1 = getWindow(element);\n        var offsetParent = getTrueOffsetParent(element);\n        while(offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === \"static\"){\n            offsetParent = getTrueOffsetParent(offsetParent);\n        }\n        if (offsetParent && (getNodeName(offsetParent) === \"html\" || getNodeName(offsetParent) === \"body\" && getComputedStyle$1(offsetParent).position === \"static\")) {\n            return window1;\n        }\n        return offsetParent || getContainingBlock(element) || window1;\n    }\n    function getMainAxisFromPlacement(placement) {\n        return [\n            \"top\",\n            \"bottom\"\n        ].indexOf(placement) >= 0 ? \"x\" : \"y\";\n    }\n    function within(min$1, value, max$1) {\n        return max(min$1, min(value, max$1));\n    }\n    function withinMaxClamp(min, value, max) {\n        var v = within(min, value, max);\n        return v > max ? max : v;\n    }\n    function getFreshSideObject() {\n        return {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n        };\n    }\n    function mergePaddingObject(paddingObject) {\n        return Object.assign({}, getFreshSideObject(), paddingObject);\n    }\n    function expandToHashMap(value, keys) {\n        return keys.reduce(function(hashMap, key) {\n            hashMap[key] = value;\n            return hashMap;\n        }, {});\n    }\n    var toPaddingObject = function toPaddingObject(padding, state) {\n        padding = typeof padding === \"function\" ? padding(Object.assign({}, state.rects, {\n            placement: state.placement\n        })) : padding;\n        return mergePaddingObject(typeof padding !== \"number\" ? padding : expandToHashMap(padding, basePlacements));\n    };\n    function arrow(_ref) {\n        var _state$modifiersData$;\n        var state = _ref.state, name = _ref.name, options = _ref.options;\n        var arrowElement = state.elements.arrow;\n        var popperOffsets = state.modifiersData.popperOffsets;\n        var basePlacement = getBasePlacement(state.placement);\n        var axis = getMainAxisFromPlacement(basePlacement);\n        var isVertical = [\n            left,\n            right\n        ].indexOf(basePlacement) >= 0;\n        var len = isVertical ? \"height\" : \"width\";\n        if (!arrowElement || !popperOffsets) {\n            return;\n        }\n        var paddingObject = toPaddingObject(options.padding, state);\n        var arrowRect = getLayoutRect(arrowElement);\n        var minProp = axis === \"y\" ? top : left;\n        var maxProp = axis === \"y\" ? bottom : right;\n        var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];\n        var startDiff = popperOffsets[axis] - state.rects.reference[axis];\n        var arrowOffsetParent = getOffsetParent(arrowElement);\n        var clientSize = arrowOffsetParent ? axis === \"y\" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n        var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is\n        // outside of the popper bounds\n        var min = paddingObject[minProp];\n        var max = clientSize - arrowRect[len] - paddingObject[maxProp];\n        var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;\n        var offset = within(min, center, max); // Prevents breaking syntax highlighting...\n        var axisProp = axis;\n        state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);\n    }\n    function effect$1(_ref2) {\n        var state = _ref2.state, options = _ref2.options;\n        var _options$element = options.element, arrowElement = _options$element === void 0 ? \"[data-popper-arrow]\" : _options$element;\n        if (arrowElement == null) {\n            return;\n        } // CSS selector\n        if (typeof arrowElement === \"string\") {\n            arrowElement = state.elements.popper.querySelector(arrowElement);\n            if (!arrowElement) {\n                return;\n            }\n        }\n        if (!contains(state.elements.popper, arrowElement)) {\n            return;\n        }\n        state.elements.arrow = arrowElement;\n    } // eslint-disable-next-line import/no-unused-modules\n    const arrow$1 = {\n        name: \"arrow\",\n        enabled: true,\n        phase: \"main\",\n        fn: arrow,\n        effect: effect$1,\n        requires: [\n            \"popperOffsets\"\n        ],\n        requiresIfExists: [\n            \"preventOverflow\"\n        ]\n    };\n    function getVariation(placement) {\n        return placement.split(\"-\")[1];\n    }\n    var unsetSides = {\n        top: \"auto\",\n        right: \"auto\",\n        bottom: \"auto\",\n        left: \"auto\"\n    }; // Round the offsets to the nearest suitable subpixel based on the DPR.\n    // Zooming can change the DPR, but it seems to report a value that will\n    // cleanly divide the values into the appropriate subpixels.\n    function roundOffsetsByDPR(_ref, win) {\n        var x = _ref.x, y = _ref.y;\n        var dpr = win.devicePixelRatio || 1;\n        return {\n            x: round(x * dpr) / dpr || 0,\n            y: round(y * dpr) / dpr || 0\n        };\n    }\n    function mapToStyles(_ref2) {\n        var _Object$assign2;\n        var popper = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;\n        var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;\n        var _ref3 = typeof roundOffsets === \"function\" ? roundOffsets({\n            x: x,\n            y: y\n        }) : {\n            x: x,\n            y: y\n        };\n        x = _ref3.x;\n        y = _ref3.y;\n        var hasX = offsets.hasOwnProperty(\"x\");\n        var hasY = offsets.hasOwnProperty(\"y\");\n        var sideX = left;\n        var sideY = top;\n        var win = window;\n        if (adaptive) {\n            var offsetParent = getOffsetParent(popper);\n            var heightProp = \"clientHeight\";\n            var widthProp = \"clientWidth\";\n            if (offsetParent === getWindow(popper)) {\n                offsetParent = getDocumentElement(popper);\n                if (getComputedStyle$1(offsetParent).position !== \"static\" && position === \"absolute\") {\n                    heightProp = \"scrollHeight\";\n                    widthProp = \"scrollWidth\";\n                }\n            } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it\n            offsetParent = offsetParent;\n            if (placement === top || (placement === left || placement === right) && variation === end) {\n                sideY = bottom;\n                var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];\n                y -= offsetY - popperRect.height;\n                y *= gpuAcceleration ? 1 : -1;\n            }\n            if (placement === left || (placement === top || placement === bottom) && variation === end) {\n                sideX = right;\n                var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];\n                x -= offsetX - popperRect.width;\n                x *= gpuAcceleration ? 1 : -1;\n            }\n        }\n        var commonStyles = Object.assign({\n            position: position\n        }, adaptive && unsetSides);\n        var _ref4 = roundOffsets === true ? roundOffsetsByDPR({\n            x: x,\n            y: y\n        }, getWindow(popper)) : {\n            x: x,\n            y: y\n        };\n        x = _ref4.x;\n        y = _ref4.y;\n        if (gpuAcceleration) {\n            var _Object$assign;\n            return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? \"0\" : \"\", _Object$assign[sideX] = hasX ? \"0\" : \"\", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? \"translate(\" + x + \"px, \" + y + \"px)\" : \"translate3d(\" + x + \"px, \" + y + \"px, 0)\", _Object$assign));\n        }\n        return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + \"px\" : \"\", _Object$assign2[sideX] = hasX ? x + \"px\" : \"\", _Object$assign2.transform = \"\", _Object$assign2));\n    }\n    function computeStyles(_ref5) {\n        var state = _ref5.state, options = _ref5.options;\n        var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;\n        var commonStyles = {\n            placement: getBasePlacement(state.placement),\n            variation: getVariation(state.placement),\n            popper: state.elements.popper,\n            popperRect: state.rects.popper,\n            gpuAcceleration: gpuAcceleration,\n            isFixed: state.options.strategy === \"fixed\"\n        };\n        if (state.modifiersData.popperOffsets != null) {\n            state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {\n                offsets: state.modifiersData.popperOffsets,\n                position: state.options.strategy,\n                adaptive: adaptive,\n                roundOffsets: roundOffsets\n            })));\n        }\n        if (state.modifiersData.arrow != null) {\n            state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {\n                offsets: state.modifiersData.arrow,\n                position: \"absolute\",\n                adaptive: false,\n                roundOffsets: roundOffsets\n            })));\n        }\n        state.attributes.popper = Object.assign({}, state.attributes.popper, {\n            \"data-popper-placement\": state.placement\n        });\n    } // eslint-disable-next-line import/no-unused-modules\n    const computeStyles$1 = {\n        name: \"computeStyles\",\n        enabled: true,\n        phase: \"beforeWrite\",\n        fn: computeStyles,\n        data: {}\n    };\n    var passive = {\n        passive: true\n    };\n    function effect(_ref) {\n        var state = _ref.state, instance = _ref.instance, options = _ref.options;\n        var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;\n        var window1 = getWindow(state.elements.popper);\n        var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);\n        if (scroll) {\n            scrollParents.forEach(function(scrollParent) {\n                scrollParent.addEventListener(\"scroll\", instance.update, passive);\n            });\n        }\n        if (resize) {\n            window1.addEventListener(\"resize\", instance.update, passive);\n        }\n        return function() {\n            if (scroll) {\n                scrollParents.forEach(function(scrollParent) {\n                    scrollParent.removeEventListener(\"scroll\", instance.update, passive);\n                });\n            }\n            if (resize) {\n                window1.removeEventListener(\"resize\", instance.update, passive);\n            }\n        };\n    } // eslint-disable-next-line import/no-unused-modules\n    const eventListeners = {\n        name: \"eventListeners\",\n        enabled: true,\n        phase: \"write\",\n        fn: function fn() {},\n        effect: effect,\n        data: {}\n    };\n    var hash$1 = {\n        left: \"right\",\n        right: \"left\",\n        bottom: \"top\",\n        top: \"bottom\"\n    };\n    function getOppositePlacement(placement) {\n        return placement.replace(/left|right|bottom|top/g, function(matched) {\n            return hash$1[matched];\n        });\n    }\n    var hash = {\n        start: \"end\",\n        end: \"start\"\n    };\n    function getOppositeVariationPlacement(placement) {\n        return placement.replace(/start|end/g, function(matched) {\n            return hash[matched];\n        });\n    }\n    function getWindowScroll(node) {\n        var win = getWindow(node);\n        var scrollLeft = win.pageXOffset;\n        var scrollTop = win.pageYOffset;\n        return {\n            scrollLeft: scrollLeft,\n            scrollTop: scrollTop\n        };\n    }\n    function getWindowScrollBarX(element) {\n        // If <html> has a CSS width greater than the viewport, then this will be\n        // incorrect for RTL.\n        // Popper 1 is broken in this case and never had a bug report so let's assume\n        // it's not an issue. I don't think anyone ever specifies width on <html>\n        // anyway.\n        // Browsers where the left scrollbar doesn't cause an issue report `0` for\n        // this (e.g. Edge 2019, IE11, Safari)\n        return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;\n    }\n    function getViewportRect(element, strategy) {\n        var win = getWindow(element);\n        var html = getDocumentElement(element);\n        var visualViewport = win.visualViewport;\n        var width = html.clientWidth;\n        var height = html.clientHeight;\n        var x = 0;\n        var y = 0;\n        if (visualViewport) {\n            width = visualViewport.width;\n            height = visualViewport.height;\n            var layoutViewport = isLayoutViewport();\n            if (layoutViewport || !layoutViewport && strategy === \"fixed\") {\n                x = visualViewport.offsetLeft;\n                y = visualViewport.offsetTop;\n            }\n        }\n        return {\n            width: width,\n            height: height,\n            x: x + getWindowScrollBarX(element),\n            y: y\n        };\n    }\n    // of the `<html>` and `<body>` rect bounds if horizontally scrollable\n    function getDocumentRect(element) {\n        var _element$ownerDocumen;\n        var html = getDocumentElement(element);\n        var winScroll = getWindowScroll(element);\n        var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;\n        var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);\n        var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);\n        var x = -winScroll.scrollLeft + getWindowScrollBarX(element);\n        var y = -winScroll.scrollTop;\n        if (getComputedStyle$1(body || html).direction === \"rtl\") {\n            x += max(html.clientWidth, body ? body.clientWidth : 0) - width;\n        }\n        return {\n            width: width,\n            height: height,\n            x: x,\n            y: y\n        };\n    }\n    function isScrollParent(element) {\n        // Firefox wants us to check `-x` and `-y` variations as well\n        var _getComputedStyle = getComputedStyle$1(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;\n        return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);\n    }\n    function getScrollParent(node) {\n        if ([\n            \"html\",\n            \"body\",\n            \"#document\"\n        ].indexOf(getNodeName(node)) >= 0) {\n            // $FlowFixMe[incompatible-return]: assume body is always available\n            return node.ownerDocument.body;\n        }\n        if (isHTMLElement(node) && isScrollParent(node)) {\n            return node;\n        }\n        return getScrollParent(getParentNode(node));\n    }\n    /*\n  given a DOM element, return the list of all scroll parents, up the list of ancesors\n  until we get to the top window object. This list is what we attach scroll listeners\n  to, because if any of these parent elements scroll, we'll need to re-calculate the\n  reference element's position.\n  */ function listScrollParents(element, list) {\n        var _element$ownerDocumen;\n        if (list === void 0) {\n            list = [];\n        }\n        var scrollParent = getScrollParent(element);\n        var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);\n        var win = getWindow(scrollParent);\n        var target = isBody ? [\n            win\n        ].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;\n        var updatedList = list.concat(target);\n        return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));\n    }\n    function rectToClientRect(rect) {\n        return Object.assign({}, rect, {\n            left: rect.x,\n            top: rect.y,\n            right: rect.x + rect.width,\n            bottom: rect.y + rect.height\n        });\n    }\n    function getInnerBoundingClientRect(element, strategy) {\n        var rect = getBoundingClientRect(element, false, strategy === \"fixed\");\n        rect.top = rect.top + element.clientTop;\n        rect.left = rect.left + element.clientLeft;\n        rect.bottom = rect.top + element.clientHeight;\n        rect.right = rect.left + element.clientWidth;\n        rect.width = element.clientWidth;\n        rect.height = element.clientHeight;\n        rect.x = rect.left;\n        rect.y = rect.top;\n        return rect;\n    }\n    function getClientRectFromMixedType(element, clippingParent, strategy) {\n        return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));\n    } // A \"clipping parent\" is an overflowable container with the characteristic of\n    // clipping (or hiding) overflowing elements with a position different from\n    // `initial`\n    function getClippingParents(element) {\n        var clippingParents = listScrollParents(getParentNode(element));\n        var canEscapeClipping = [\n            \"absolute\",\n            \"fixed\"\n        ].indexOf(getComputedStyle$1(element).position) >= 0;\n        var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;\n        if (!isElement(clipperElement)) {\n            return [];\n        } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414\n        return clippingParents.filter(function(clippingParent) {\n            return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== \"body\";\n        });\n    } // Gets the maximum area that the element is visible in due to any number of\n    // clipping parents\n    function getClippingRect(element, boundary, rootBoundary, strategy) {\n        var mainClippingParents = boundary === \"clippingParents\" ? getClippingParents(element) : [].concat(boundary);\n        var clippingParents = [].concat(mainClippingParents, [\n            rootBoundary\n        ]);\n        var firstClippingParent = clippingParents[0];\n        var clippingRect = clippingParents.reduce(function(accRect, clippingParent) {\n            var rect = getClientRectFromMixedType(element, clippingParent, strategy);\n            accRect.top = max(rect.top, accRect.top);\n            accRect.right = min(rect.right, accRect.right);\n            accRect.bottom = min(rect.bottom, accRect.bottom);\n            accRect.left = max(rect.left, accRect.left);\n            return accRect;\n        }, getClientRectFromMixedType(element, firstClippingParent, strategy));\n        clippingRect.width = clippingRect.right - clippingRect.left;\n        clippingRect.height = clippingRect.bottom - clippingRect.top;\n        clippingRect.x = clippingRect.left;\n        clippingRect.y = clippingRect.top;\n        return clippingRect;\n    }\n    function computeOffsets(_ref) {\n        var reference = _ref.reference, element = _ref.element, placement = _ref.placement;\n        var basePlacement = placement ? getBasePlacement(placement) : null;\n        var variation = placement ? getVariation(placement) : null;\n        var commonX = reference.x + reference.width / 2 - element.width / 2;\n        var commonY = reference.y + reference.height / 2 - element.height / 2;\n        var offsets;\n        switch(basePlacement){\n            case top:\n                offsets = {\n                    x: commonX,\n                    y: reference.y - element.height\n                };\n                break;\n            case bottom:\n                offsets = {\n                    x: commonX,\n                    y: reference.y + reference.height\n                };\n                break;\n            case right:\n                offsets = {\n                    x: reference.x + reference.width,\n                    y: commonY\n                };\n                break;\n            case left:\n                offsets = {\n                    x: reference.x - element.width,\n                    y: commonY\n                };\n                break;\n            default:\n                offsets = {\n                    x: reference.x,\n                    y: reference.y\n                };\n        }\n        var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;\n        if (mainAxis != null) {\n            var len = mainAxis === \"y\" ? \"height\" : \"width\";\n            switch(variation){\n                case start:\n                    offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);\n                    break;\n                case end:\n                    offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);\n                    break;\n            }\n        }\n        return offsets;\n    }\n    function detectOverflow(state, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;\n        var paddingObject = mergePaddingObject(typeof padding !== \"number\" ? padding : expandToHashMap(padding, basePlacements));\n        var altContext = elementContext === popper ? reference : popper;\n        var popperRect = state.rects.popper;\n        var element = state.elements[altBoundary ? altContext : elementContext];\n        var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);\n        var referenceClientRect = getBoundingClientRect(state.elements.reference);\n        var popperOffsets = computeOffsets({\n            reference: referenceClientRect,\n            element: popperRect,\n            strategy: \"absolute\",\n            placement: placement\n        });\n        var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));\n        var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect\n        // 0 or negative = within the clipping rect\n        var overflowOffsets = {\n            top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n            bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n            left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n            right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n        };\n        var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element\n        if (elementContext === popper && offsetData) {\n            var offset = offsetData[placement];\n            Object.keys(overflowOffsets).forEach(function(key) {\n                var multiply = [\n                    right,\n                    bottom\n                ].indexOf(key) >= 0 ? 1 : -1;\n                var axis = [\n                    top,\n                    bottom\n                ].indexOf(key) >= 0 ? \"y\" : \"x\";\n                overflowOffsets[key] += offset[axis] * multiply;\n            });\n        }\n        return overflowOffsets;\n    }\n    function computeAutoPlacement(state, options) {\n        if (options === void 0) {\n            options = {};\n        }\n        var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;\n        var variation = getVariation(placement);\n        var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement) {\n            return getVariation(placement) === variation;\n        }) : basePlacements;\n        var allowedPlacements = placements$1.filter(function(placement) {\n            return allowedAutoPlacements.indexOf(placement) >= 0;\n        });\n        if (allowedPlacements.length === 0) {\n            allowedPlacements = placements$1;\n        } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...\n        var overflows = allowedPlacements.reduce(function(acc, placement) {\n            acc[placement] = detectOverflow(state, {\n                placement: placement,\n                boundary: boundary,\n                rootBoundary: rootBoundary,\n                padding: padding\n            })[getBasePlacement(placement)];\n            return acc;\n        }, {});\n        return Object.keys(overflows).sort(function(a, b) {\n            return overflows[a] - overflows[b];\n        });\n    }\n    function getExpandedFallbackPlacements(placement) {\n        if (getBasePlacement(placement) === auto) {\n            return [];\n        }\n        var oppositePlacement = getOppositePlacement(placement);\n        return [\n            getOppositeVariationPlacement(placement),\n            oppositePlacement,\n            getOppositeVariationPlacement(oppositePlacement)\n        ];\n    }\n    function flip(_ref) {\n        var state = _ref.state, options = _ref.options, name = _ref.name;\n        if (state.modifiersData[name]._skip) {\n            return;\n        }\n        var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;\n        var preferredPlacement = state.options.placement;\n        var basePlacement = getBasePlacement(preferredPlacement);\n        var isBasePlacement = basePlacement === preferredPlacement;\n        var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [\n            getOppositePlacement(preferredPlacement)\n        ] : getExpandedFallbackPlacements(preferredPlacement));\n        var placements = [\n            preferredPlacement\n        ].concat(fallbackPlacements).reduce(function(acc, placement) {\n            return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {\n                placement: placement,\n                boundary: boundary,\n                rootBoundary: rootBoundary,\n                padding: padding,\n                flipVariations: flipVariations,\n                allowedAutoPlacements: allowedAutoPlacements\n            }) : placement);\n        }, []);\n        var referenceRect = state.rects.reference;\n        var popperRect = state.rects.popper;\n        var checksMap = new Map();\n        var makeFallbackChecks = true;\n        var firstFittingPlacement = placements[0];\n        for(var i = 0; i < placements.length; i++){\n            var placement = placements[i];\n            var _basePlacement = getBasePlacement(placement);\n            var isStartVariation = getVariation(placement) === start;\n            var isVertical = [\n                top,\n                bottom\n            ].indexOf(_basePlacement) >= 0;\n            var len = isVertical ? \"width\" : \"height\";\n            var overflow = detectOverflow(state, {\n                placement: placement,\n                boundary: boundary,\n                rootBoundary: rootBoundary,\n                altBoundary: altBoundary,\n                padding: padding\n            });\n            var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;\n            if (referenceRect[len] > popperRect[len]) {\n                mainVariationSide = getOppositePlacement(mainVariationSide);\n            }\n            var altVariationSide = getOppositePlacement(mainVariationSide);\n            var checks = [];\n            if (checkMainAxis) {\n                checks.push(overflow[_basePlacement] <= 0);\n            }\n            if (checkAltAxis) {\n                checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);\n            }\n            if (checks.every(function(check) {\n                return check;\n            })) {\n                firstFittingPlacement = placement;\n                makeFallbackChecks = false;\n                break;\n            }\n            checksMap.set(placement, checks);\n        }\n        if (makeFallbackChecks) {\n            // `2` may be desired in some cases – research later\n            var numberOfChecks = flipVariations ? 3 : 1;\n            var _loop = function _loop(_i) {\n                var fittingPlacement = placements.find(function(placement) {\n                    var checks = checksMap.get(placement);\n                    if (checks) {\n                        return checks.slice(0, _i).every(function(check) {\n                            return check;\n                        });\n                    }\n                });\n                if (fittingPlacement) {\n                    firstFittingPlacement = fittingPlacement;\n                    return \"break\";\n                }\n            };\n            for(var _i = numberOfChecks; _i > 0; _i--){\n                var _ret = _loop(_i);\n                if (_ret === \"break\") break;\n            }\n        }\n        if (state.placement !== firstFittingPlacement) {\n            state.modifiersData[name]._skip = true;\n            state.placement = firstFittingPlacement;\n            state.reset = true;\n        }\n    } // eslint-disable-next-line import/no-unused-modules\n    const flip$1 = {\n        name: \"flip\",\n        enabled: true,\n        phase: \"main\",\n        fn: flip,\n        requiresIfExists: [\n            \"offset\"\n        ],\n        data: {\n            _skip: false\n        }\n    };\n    function getSideOffsets(overflow, rect, preventedOffsets) {\n        if (preventedOffsets === void 0) {\n            preventedOffsets = {\n                x: 0,\n                y: 0\n            };\n        }\n        return {\n            top: overflow.top - rect.height - preventedOffsets.y,\n            right: overflow.right - rect.width + preventedOffsets.x,\n            bottom: overflow.bottom - rect.height + preventedOffsets.y,\n            left: overflow.left - rect.width - preventedOffsets.x\n        };\n    }\n    function isAnySideFullyClipped(overflow) {\n        return [\n            top,\n            right,\n            bottom,\n            left\n        ].some(function(side) {\n            return overflow[side] >= 0;\n        });\n    }\n    function hide(_ref) {\n        var state = _ref.state, name = _ref.name;\n        var referenceRect = state.rects.reference;\n        var popperRect = state.rects.popper;\n        var preventedOffsets = state.modifiersData.preventOverflow;\n        var referenceOverflow = detectOverflow(state, {\n            elementContext: \"reference\"\n        });\n        var popperAltOverflow = detectOverflow(state, {\n            altBoundary: true\n        });\n        var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);\n        var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);\n        var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);\n        var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);\n        state.modifiersData[name] = {\n            referenceClippingOffsets: referenceClippingOffsets,\n            popperEscapeOffsets: popperEscapeOffsets,\n            isReferenceHidden: isReferenceHidden,\n            hasPopperEscaped: hasPopperEscaped\n        };\n        state.attributes.popper = Object.assign({}, state.attributes.popper, {\n            \"data-popper-reference-hidden\": isReferenceHidden,\n            \"data-popper-escaped\": hasPopperEscaped\n        });\n    } // eslint-disable-next-line import/no-unused-modules\n    const hide$1 = {\n        name: \"hide\",\n        enabled: true,\n        phase: \"main\",\n        requiresIfExists: [\n            \"preventOverflow\"\n        ],\n        fn: hide\n    };\n    function distanceAndSkiddingToXY(placement, rects, offset) {\n        var basePlacement = getBasePlacement(placement);\n        var invertDistance = [\n            left,\n            top\n        ].indexOf(basePlacement) >= 0 ? -1 : 1;\n        var _ref = typeof offset === \"function\" ? offset(Object.assign({}, rects, {\n            placement: placement\n        })) : offset, skidding = _ref[0], distance = _ref[1];\n        skidding = skidding || 0;\n        distance = (distance || 0) * invertDistance;\n        return [\n            left,\n            right\n        ].indexOf(basePlacement) >= 0 ? {\n            x: distance,\n            y: skidding\n        } : {\n            x: skidding,\n            y: distance\n        };\n    }\n    function offset(_ref2) {\n        var state = _ref2.state, options = _ref2.options, name = _ref2.name;\n        var _options$offset = options.offset, offset = _options$offset === void 0 ? [\n            0,\n            0\n        ] : _options$offset;\n        var data = placements.reduce(function(acc, placement) {\n            acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);\n            return acc;\n        }, {});\n        var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;\n        if (state.modifiersData.popperOffsets != null) {\n            state.modifiersData.popperOffsets.x += x;\n            state.modifiersData.popperOffsets.y += y;\n        }\n        state.modifiersData[name] = data;\n    } // eslint-disable-next-line import/no-unused-modules\n    const offset$1 = {\n        name: \"offset\",\n        enabled: true,\n        phase: \"main\",\n        requires: [\n            \"popperOffsets\"\n        ],\n        fn: offset\n    };\n    function popperOffsets(_ref) {\n        var state = _ref.state, name = _ref.name;\n        // Offsets are the actual position the popper needs to have to be\n        // properly positioned near its reference element\n        // This is the most basic placement, and will be adjusted by\n        // the modifiers in the next step\n        state.modifiersData[name] = computeOffsets({\n            reference: state.rects.reference,\n            element: state.rects.popper,\n            strategy: \"absolute\",\n            placement: state.placement\n        });\n    } // eslint-disable-next-line import/no-unused-modules\n    const popperOffsets$1 = {\n        name: \"popperOffsets\",\n        enabled: true,\n        phase: \"read\",\n        fn: popperOffsets,\n        data: {}\n    };\n    function getAltAxis(axis) {\n        return axis === \"x\" ? \"y\" : \"x\";\n    }\n    function preventOverflow(_ref) {\n        var state = _ref.state, options = _ref.options, name = _ref.name;\n        var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;\n        var overflow = detectOverflow(state, {\n            boundary: boundary,\n            rootBoundary: rootBoundary,\n            padding: padding,\n            altBoundary: altBoundary\n        });\n        var basePlacement = getBasePlacement(state.placement);\n        var variation = getVariation(state.placement);\n        var isBasePlacement = !variation;\n        var mainAxis = getMainAxisFromPlacement(basePlacement);\n        var altAxis = getAltAxis(mainAxis);\n        var popperOffsets = state.modifiersData.popperOffsets;\n        var referenceRect = state.rects.reference;\n        var popperRect = state.rects.popper;\n        var tetherOffsetValue = typeof tetherOffset === \"function\" ? tetherOffset(Object.assign({}, state.rects, {\n            placement: state.placement\n        })) : tetherOffset;\n        var normalizedTetherOffsetValue = typeof tetherOffsetValue === \"number\" ? {\n            mainAxis: tetherOffsetValue,\n            altAxis: tetherOffsetValue\n        } : Object.assign({\n            mainAxis: 0,\n            altAxis: 0\n        }, tetherOffsetValue);\n        var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;\n        var data = {\n            x: 0,\n            y: 0\n        };\n        if (!popperOffsets) {\n            return;\n        }\n        if (checkMainAxis) {\n            var _offsetModifierState$;\n            var mainSide = mainAxis === \"y\" ? top : left;\n            var altSide = mainAxis === \"y\" ? bottom : right;\n            var len = mainAxis === \"y\" ? \"height\" : \"width\";\n            var offset = popperOffsets[mainAxis];\n            var min$1 = offset + overflow[mainSide];\n            var max$1 = offset - overflow[altSide];\n            var additive = tether ? -popperRect[len] / 2 : 0;\n            var minLen = variation === start ? referenceRect[len] : popperRect[len];\n            var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go\n            // outside the reference bounds\n            var arrowElement = state.elements.arrow;\n            var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {\n                width: 0,\n                height: 0\n            };\n            var arrowPaddingObject = state.modifiersData[\"arrow#persistent\"] ? state.modifiersData[\"arrow#persistent\"].padding : getFreshSideObject();\n            var arrowPaddingMin = arrowPaddingObject[mainSide];\n            var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want\n            // to include its full size in the calculation. If the reference is small\n            // and near the edge of a boundary, the popper can overflow even if the\n            // reference is not overflowing as well (e.g. virtual elements with no\n            // width or height)\n            var arrowLen = within(0, referenceRect[len], arrowRect[len]);\n            var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;\n            var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;\n            var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);\n            var clientOffset = arrowOffsetParent ? mainAxis === \"y\" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;\n            var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;\n            var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;\n            var tetherMax = offset + maxOffset - offsetModifierValue;\n            var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);\n            popperOffsets[mainAxis] = preventedOffset;\n            data[mainAxis] = preventedOffset - offset;\n        }\n        if (checkAltAxis) {\n            var _offsetModifierState$2;\n            var _mainSide = mainAxis === \"x\" ? top : left;\n            var _altSide = mainAxis === \"x\" ? bottom : right;\n            var _offset = popperOffsets[altAxis];\n            var _len = altAxis === \"y\" ? \"height\" : \"width\";\n            var _min = _offset + overflow[_mainSide];\n            var _max = _offset - overflow[_altSide];\n            var isOriginSide = [\n                top,\n                left\n            ].indexOf(basePlacement) !== -1;\n            var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;\n            var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;\n            var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;\n            var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);\n            popperOffsets[altAxis] = _preventedOffset;\n            data[altAxis] = _preventedOffset - _offset;\n        }\n        state.modifiersData[name] = data;\n    } // eslint-disable-next-line import/no-unused-modules\n    const preventOverflow$1 = {\n        name: \"preventOverflow\",\n        enabled: true,\n        phase: \"main\",\n        fn: preventOverflow,\n        requiresIfExists: [\n            \"offset\"\n        ]\n    };\n    function getHTMLElementScroll(element) {\n        return {\n            scrollLeft: element.scrollLeft,\n            scrollTop: element.scrollTop\n        };\n    }\n    function getNodeScroll(node) {\n        if (node === getWindow(node) || !isHTMLElement(node)) {\n            return getWindowScroll(node);\n        } else {\n            return getHTMLElementScroll(node);\n        }\n    }\n    function isElementScaled(element) {\n        var rect = element.getBoundingClientRect();\n        var scaleX = round(rect.width) / element.offsetWidth || 1;\n        var scaleY = round(rect.height) / element.offsetHeight || 1;\n        return scaleX !== 1 || scaleY !== 1;\n    } // Returns the composite rect of an element relative to its offsetParent.\n    // Composite means it takes into account transforms as well as layout.\n    function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {\n        if (isFixed === void 0) {\n            isFixed = false;\n        }\n        var isOffsetParentAnElement = isHTMLElement(offsetParent);\n        var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);\n        var documentElement = getDocumentElement(offsetParent);\n        var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);\n        var scroll = {\n            scrollLeft: 0,\n            scrollTop: 0\n        };\n        var offsets = {\n            x: 0,\n            y: 0\n        };\n        if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n            if (getNodeName(offsetParent) !== \"body\" || // https://github.com/popperjs/popper-core/issues/1078\n            isScrollParent(documentElement)) {\n                scroll = getNodeScroll(offsetParent);\n            }\n            if (isHTMLElement(offsetParent)) {\n                offsets = getBoundingClientRect(offsetParent, true);\n                offsets.x += offsetParent.clientLeft;\n                offsets.y += offsetParent.clientTop;\n            } else if (documentElement) {\n                offsets.x = getWindowScrollBarX(documentElement);\n            }\n        }\n        return {\n            x: rect.left + scroll.scrollLeft - offsets.x,\n            y: rect.top + scroll.scrollTop - offsets.y,\n            width: rect.width,\n            height: rect.height\n        };\n    }\n    function order(modifiers) {\n        var map = new Map();\n        var visited = new Set();\n        var result = [];\n        modifiers.forEach(function(modifier) {\n            map.set(modifier.name, modifier);\n        }); // On visiting object, check for its dependencies and visit them recursively\n        function sort(modifier) {\n            visited.add(modifier.name);\n            var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);\n            requires.forEach(function(dep) {\n                if (!visited.has(dep)) {\n                    var depModifier = map.get(dep);\n                    if (depModifier) {\n                        sort(depModifier);\n                    }\n                }\n            });\n            result.push(modifier);\n        }\n        modifiers.forEach(function(modifier) {\n            if (!visited.has(modifier.name)) {\n                // check for visited object\n                sort(modifier);\n            }\n        });\n        return result;\n    }\n    function orderModifiers(modifiers) {\n        // order based on dependencies\n        var orderedModifiers = order(modifiers); // order based on phase\n        return modifierPhases.reduce(function(acc, phase) {\n            return acc.concat(orderedModifiers.filter(function(modifier) {\n                return modifier.phase === phase;\n            }));\n        }, []);\n    }\n    function debounce(fn) {\n        var pending;\n        return function() {\n            if (!pending) {\n                pending = new Promise(function(resolve) {\n                    Promise.resolve().then(function() {\n                        pending = undefined;\n                        resolve(fn());\n                    });\n                });\n            }\n            return pending;\n        };\n    }\n    function mergeByName(modifiers) {\n        var merged = modifiers.reduce(function(merged, current) {\n            var existing = merged[current.name];\n            merged[current.name] = existing ? Object.assign({}, existing, current, {\n                options: Object.assign({}, existing.options, current.options),\n                data: Object.assign({}, existing.data, current.data)\n            }) : current;\n            return merged;\n        }, {}); // IE11 does not support Object.values\n        return Object.keys(merged).map(function(key) {\n            return merged[key];\n        });\n    }\n    var DEFAULT_OPTIONS = {\n        placement: \"bottom\",\n        modifiers: [],\n        strategy: \"absolute\"\n    };\n    function areValidElements() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return !args.some(function(element) {\n            return !(element && typeof element.getBoundingClientRect === \"function\");\n        });\n    }\n    function popperGenerator(generatorOptions) {\n        if (generatorOptions === void 0) {\n            generatorOptions = {};\n        }\n        var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;\n        return function createPopper(reference, popper, options) {\n            if (options === void 0) {\n                options = defaultOptions;\n            }\n            var state = {\n                placement: \"bottom\",\n                orderedModifiers: [],\n                options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),\n                modifiersData: {},\n                elements: {\n                    reference: reference,\n                    popper: popper\n                },\n                attributes: {},\n                styles: {}\n            };\n            var effectCleanupFns = [];\n            var isDestroyed = false;\n            var instance = {\n                state: state,\n                setOptions: function setOptions(setOptionsAction) {\n                    var options = typeof setOptionsAction === \"function\" ? setOptionsAction(state.options) : setOptionsAction;\n                    cleanupModifierEffects();\n                    state.options = Object.assign({}, defaultOptions, state.options, options);\n                    state.scrollParents = {\n                        reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],\n                        popper: listScrollParents(popper)\n                    }; // Orders the modifiers based on their dependencies and `phase`\n                    // properties\n                    var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers\n                    state.orderedModifiers = orderedModifiers.filter(function(m) {\n                        return m.enabled;\n                    });\n                    runModifierEffects();\n                    return instance.update();\n                },\n                // Sync update – it will always be executed, even if not necessary. This\n                // is useful for low frequency updates where sync behavior simplifies the\n                // logic.\n                // For high frequency updates (e.g. `resize` and `scroll` events), always\n                // prefer the async Popper#update method\n                forceUpdate: function forceUpdate() {\n                    if (isDestroyed) {\n                        return;\n                    }\n                    var _state$elements = state.elements, reference = _state$elements.reference, popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements\n                    // anymore\n                    if (!areValidElements(reference, popper)) {\n                        return;\n                    } // Store the reference and popper rects to be read by modifiers\n                    state.rects = {\n                        reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === \"fixed\"),\n                        popper: getLayoutRect(popper)\n                    }; // Modifiers have the ability to reset the current update cycle. The\n                    // most common use case for this is the `flip` modifier changing the\n                    // placement, which then needs to re-run all the modifiers, because the\n                    // logic was previously ran for the previous placement and is therefore\n                    // stale/incorrect\n                    state.reset = false;\n                    state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier\n                    // is filled with the initial data specified by the modifier. This means\n                    // it doesn't persist and is fresh on each update.\n                    // To ensure persistent data, use `${name}#persistent`\n                    state.orderedModifiers.forEach(function(modifier) {\n                        return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);\n                    });\n                    for(var index = 0; index < state.orderedModifiers.length; index++){\n                        if (state.reset === true) {\n                            state.reset = false;\n                            index = -1;\n                            continue;\n                        }\n                        var _state$orderedModifie = state.orderedModifiers[index], fn = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;\n                        if (typeof fn === \"function\") {\n                            state = fn({\n                                state: state,\n                                options: _options,\n                                name: name,\n                                instance: instance\n                            }) || state;\n                        }\n                    }\n                },\n                // Async and optimistically optimized update – it will not be executed if\n                // not necessary (debounced to run at most once-per-tick)\n                update: debounce(function() {\n                    return new Promise(function(resolve) {\n                        instance.forceUpdate();\n                        resolve(state);\n                    });\n                }),\n                destroy: function destroy() {\n                    cleanupModifierEffects();\n                    isDestroyed = true;\n                }\n            };\n            if (!areValidElements(reference, popper)) {\n                return instance;\n            }\n            instance.setOptions(options).then(function(state) {\n                if (!isDestroyed && options.onFirstUpdate) {\n                    options.onFirstUpdate(state);\n                }\n            }); // Modifiers have the ability to execute arbitrary code before the first\n            // update cycle runs. They will be executed in the same order as the update\n            // cycle. This is useful when a modifier adds some persistent data that\n            // other modifiers need to use, but the modifier is run after the dependent\n            // one.\n            function runModifierEffects() {\n                state.orderedModifiers.forEach(function(_ref) {\n                    var name = _ref.name, _ref$options = _ref.options, options = _ref$options === void 0 ? {} : _ref$options, effect = _ref.effect;\n                    if (typeof effect === \"function\") {\n                        var cleanupFn = effect({\n                            state: state,\n                            name: name,\n                            instance: instance,\n                            options: options\n                        });\n                        var noopFn = function noopFn() {};\n                        effectCleanupFns.push(cleanupFn || noopFn);\n                    }\n                });\n            }\n            function cleanupModifierEffects() {\n                effectCleanupFns.forEach(function(fn) {\n                    return fn();\n                });\n                effectCleanupFns = [];\n            }\n            return instance;\n        };\n    }\n    var createPopper$2 = /*#__PURE__*/ popperGenerator(); // eslint-disable-next-line import/no-unused-modules\n    var defaultModifiers$1 = [\n        eventListeners,\n        popperOffsets$1,\n        computeStyles$1,\n        applyStyles$1\n    ];\n    var createPopper$1 = /*#__PURE__*/ popperGenerator({\n        defaultModifiers: defaultModifiers$1\n    }); // eslint-disable-next-line import/no-unused-modules\n    var defaultModifiers = [\n        eventListeners,\n        popperOffsets$1,\n        computeStyles$1,\n        applyStyles$1,\n        offset$1,\n        flip$1,\n        preventOverflow$1,\n        arrow$1,\n        hide$1\n    ];\n    var createPopper = /*#__PURE__*/ popperGenerator({\n        defaultModifiers: defaultModifiers\n    }); // eslint-disable-next-line import/no-unused-modules\n    const Popper = /*#__PURE__*/ Object.freeze(/*#__PURE__*/ Object.defineProperty({\n        __proto__: null,\n        afterMain,\n        afterRead,\n        afterWrite,\n        applyStyles: applyStyles$1,\n        arrow: arrow$1,\n        auto,\n        basePlacements,\n        beforeMain,\n        beforeRead,\n        beforeWrite,\n        bottom,\n        clippingParents,\n        computeStyles: computeStyles$1,\n        createPopper,\n        createPopperBase: createPopper$2,\n        createPopperLite: createPopper$1,\n        detectOverflow,\n        end,\n        eventListeners,\n        flip: flip$1,\n        hide: hide$1,\n        left,\n        main,\n        modifierPhases,\n        offset: offset$1,\n        placements,\n        popper,\n        popperGenerator,\n        popperOffsets: popperOffsets$1,\n        preventOverflow: preventOverflow$1,\n        read,\n        reference,\n        right,\n        start,\n        top,\n        variationPlacements,\n        viewport,\n        write\n    }, Symbol.toStringTag, {\n        value: \"Module\"\n    }));\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap dropdown.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$a = \"dropdown\";\n    const DATA_KEY$6 = \"bs.dropdown\";\n    const EVENT_KEY$6 = \".\".concat(DATA_KEY$6);\n    const DATA_API_KEY$3 = \".data-api\";\n    const ESCAPE_KEY$2 = \"Escape\";\n    const TAB_KEY$1 = \"Tab\";\n    const ARROW_UP_KEY$1 = \"ArrowUp\";\n    const ARROW_DOWN_KEY$1 = \"ArrowDown\";\n    const RIGHT_MOUSE_BUTTON = 2; // MouseEvent.button value for the secondary button, usually the right button\n    const EVENT_HIDE$5 = \"hide\".concat(EVENT_KEY$6);\n    const EVENT_HIDDEN$5 = \"hidden\".concat(EVENT_KEY$6);\n    const EVENT_SHOW$5 = \"show\".concat(EVENT_KEY$6);\n    const EVENT_SHOWN$5 = \"shown\".concat(EVENT_KEY$6);\n    const EVENT_CLICK_DATA_API$3 = \"click\".concat(EVENT_KEY$6).concat(DATA_API_KEY$3);\n    const EVENT_KEYDOWN_DATA_API = \"keydown\".concat(EVENT_KEY$6).concat(DATA_API_KEY$3);\n    const EVENT_KEYUP_DATA_API = \"keyup\".concat(EVENT_KEY$6).concat(DATA_API_KEY$3);\n    const CLASS_NAME_SHOW$6 = \"show\";\n    const CLASS_NAME_DROPUP = \"dropup\";\n    const CLASS_NAME_DROPEND = \"dropend\";\n    const CLASS_NAME_DROPSTART = \"dropstart\";\n    const CLASS_NAME_DROPUP_CENTER = \"dropup-center\";\n    const CLASS_NAME_DROPDOWN_CENTER = \"dropdown-center\";\n    const SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle=\"dropdown\"]:not(.disabled):not(:disabled)';\n    const SELECTOR_DATA_TOGGLE_SHOWN = \"\".concat(SELECTOR_DATA_TOGGLE$3, \".\").concat(CLASS_NAME_SHOW$6);\n    const SELECTOR_MENU = \".dropdown-menu\";\n    const SELECTOR_NAVBAR = \".navbar\";\n    const SELECTOR_NAVBAR_NAV = \".navbar-nav\";\n    const SELECTOR_VISIBLE_ITEMS = \".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)\";\n    const PLACEMENT_TOP = isRTL() ? \"top-end\" : \"top-start\";\n    const PLACEMENT_TOPEND = isRTL() ? \"top-start\" : \"top-end\";\n    const PLACEMENT_BOTTOM = isRTL() ? \"bottom-end\" : \"bottom-start\";\n    const PLACEMENT_BOTTOMEND = isRTL() ? \"bottom-start\" : \"bottom-end\";\n    const PLACEMENT_RIGHT = isRTL() ? \"left-start\" : \"right-start\";\n    const PLACEMENT_LEFT = isRTL() ? \"right-start\" : \"left-start\";\n    const PLACEMENT_TOPCENTER = \"top\";\n    const PLACEMENT_BOTTOMCENTER = \"bottom\";\n    const Default$9 = {\n        autoClose: true,\n        boundary: \"clippingParents\",\n        display: \"dynamic\",\n        offset: [\n            0,\n            2\n        ],\n        popperConfig: null,\n        reference: \"toggle\"\n    };\n    const DefaultType$9 = {\n        autoClose: \"(boolean|string)\",\n        boundary: \"(string|element)\",\n        display: \"string\",\n        offset: \"(array|string|function)\",\n        popperConfig: \"(null|object|function)\",\n        reference: \"(string|element|object)\"\n    };\n    /**\n   * Class definition\n   */ class Dropdown extends BaseComponent {\n        // Getters\n        static get Default() {\n            return Default$9;\n        }\n        static get DefaultType() {\n            return DefaultType$9;\n        }\n        static get NAME() {\n            return NAME$a;\n        }\n        // Public\n        toggle() {\n            return this._isShown() ? this.hide() : this.show();\n        }\n        show() {\n            if (isDisabled(this._element) || this._isShown()) {\n                return;\n            }\n            const relatedTarget = {\n                relatedTarget: this._element\n            };\n            const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$5, relatedTarget);\n            if (showEvent.defaultPrevented) {\n                return;\n            }\n            this._createPopper();\n            // If this is a touch-enabled device we add extra\n            // empty mouseover listeners to the body's immediate children;\n            // only needed because of broken event delegation on iOS\n            // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n            if (\"ontouchstart\" in document.documentElement && !this._parent.closest(SELECTOR_NAVBAR_NAV)) {\n                for (const element of [].concat(...document.body.children)){\n                    EventHandler.on(element, \"mouseover\", noop);\n                }\n            }\n            this._element.focus();\n            this._element.setAttribute(\"aria-expanded\", true);\n            this._menu.classList.add(CLASS_NAME_SHOW$6);\n            this._element.classList.add(CLASS_NAME_SHOW$6);\n            EventHandler.trigger(this._element, EVENT_SHOWN$5, relatedTarget);\n        }\n        hide() {\n            if (isDisabled(this._element) || !this._isShown()) {\n                return;\n            }\n            const relatedTarget = {\n                relatedTarget: this._element\n            };\n            this._completeHide(relatedTarget);\n        }\n        dispose() {\n            if (this._popper) {\n                this._popper.destroy();\n            }\n            super.dispose();\n        }\n        update() {\n            this._inNavbar = this._detectNavbar();\n            if (this._popper) {\n                this._popper.update();\n            }\n        }\n        // Private\n        _completeHide(relatedTarget) {\n            const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$5, relatedTarget);\n            if (hideEvent.defaultPrevented) {\n                return;\n            }\n            // If this is a touch-enabled device we remove the extra\n            // empty mouseover listeners we added for iOS support\n            if (\"ontouchstart\" in document.documentElement) {\n                for (const element of [].concat(...document.body.children)){\n                    EventHandler.off(element, \"mouseover\", noop);\n                }\n            }\n            if (this._popper) {\n                this._popper.destroy();\n            }\n            this._menu.classList.remove(CLASS_NAME_SHOW$6);\n            this._element.classList.remove(CLASS_NAME_SHOW$6);\n            this._element.setAttribute(\"aria-expanded\", \"false\");\n            Manipulator.removeDataAttribute(this._menu, \"popper\");\n            EventHandler.trigger(this._element, EVENT_HIDDEN$5, relatedTarget);\n        }\n        _getConfig(config) {\n            config = super._getConfig(config);\n            if (typeof config.reference === \"object\" && !isElement$1(config.reference) && typeof config.reference.getBoundingClientRect !== \"function\") {\n                // Popper virtual elements require a getBoundingClientRect method\n                throw new TypeError(\"\".concat(NAME$a.toUpperCase(), ': Option \"reference\" provided type \"object\" without a required \"getBoundingClientRect\" method.'));\n            }\n            return config;\n        }\n        _createPopper() {\n            if (typeof Popper === \"undefined\") {\n                throw new TypeError(\"Bootstrap's dropdowns require Popper (https://popper.js.org)\");\n            }\n            let referenceElement = this._element;\n            if (this._config.reference === \"parent\") {\n                referenceElement = this._parent;\n            } else if (isElement$1(this._config.reference)) {\n                referenceElement = getElement(this._config.reference);\n            } else if (typeof this._config.reference === \"object\") {\n                referenceElement = this._config.reference;\n            }\n            const popperConfig = this._getPopperConfig();\n            this._popper = createPopper(referenceElement, this._menu, popperConfig);\n        }\n        _isShown() {\n            return this._menu.classList.contains(CLASS_NAME_SHOW$6);\n        }\n        _getPlacement() {\n            const parentDropdown = this._parent;\n            if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {\n                return PLACEMENT_RIGHT;\n            }\n            if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {\n                return PLACEMENT_LEFT;\n            }\n            if (parentDropdown.classList.contains(CLASS_NAME_DROPUP_CENTER)) {\n                return PLACEMENT_TOPCENTER;\n            }\n            if (parentDropdown.classList.contains(CLASS_NAME_DROPDOWN_CENTER)) {\n                return PLACEMENT_BOTTOMCENTER;\n            }\n            // We need to trim the value because custom properties can also include spaces\n            const isEnd = getComputedStyle(this._menu).getPropertyValue(\"--bs-position\").trim() === \"end\";\n            if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {\n                return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;\n            }\n            return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;\n        }\n        _detectNavbar() {\n            return this._element.closest(SELECTOR_NAVBAR) !== null;\n        }\n        _getOffset() {\n            const { offset } = this._config;\n            if (typeof offset === \"string\") {\n                return offset.split(\",\").map((value)=>Number.parseInt(value, 10));\n            }\n            if (typeof offset === \"function\") {\n                return (popperData)=>offset(popperData, this._element);\n            }\n            return offset;\n        }\n        _getPopperConfig() {\n            const defaultBsPopperConfig = {\n                placement: this._getPlacement(),\n                modifiers: [\n                    {\n                        name: \"preventOverflow\",\n                        options: {\n                            boundary: this._config.boundary\n                        }\n                    },\n                    {\n                        name: \"offset\",\n                        options: {\n                            offset: this._getOffset()\n                        }\n                    }\n                ]\n            };\n            // Disable Popper if we have a static display or Dropdown is in Navbar\n            if (this._inNavbar || this._config.display === \"static\") {\n                Manipulator.setDataAttribute(this._menu, \"popper\", \"static\"); // TODO: v6 remove\n                defaultBsPopperConfig.modifiers = [\n                    {\n                        name: \"applyStyles\",\n                        enabled: false\n                    }\n                ];\n            }\n            return {\n                ...defaultBsPopperConfig,\n                ...execute(this._config.popperConfig, [\n                    defaultBsPopperConfig\n                ])\n            };\n        }\n        _selectMenuItem(param) {\n            let { key, target } = param;\n            const items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter((element)=>isVisible(element));\n            if (!items.length) {\n                return;\n            }\n            // if target isn't included in items (e.g. when expanding the dropdown)\n            // allow cycling to get the last item in case key equals ARROW_UP_KEY\n            getNextActiveElement(items, target, key === ARROW_DOWN_KEY$1, !items.includes(target)).focus();\n        }\n        // Static\n        static jQueryInterface(config) {\n            return this.each(function() {\n                const data = Dropdown.getOrCreateInstance(this, config);\n                if (typeof config !== \"string\") {\n                    return;\n                }\n                if (typeof data[config] === \"undefined\") {\n                    throw new TypeError('No method named \"'.concat(config, '\"'));\n                }\n                data[config]();\n            });\n        }\n        static clearMenus(event) {\n            if (event.button === RIGHT_MOUSE_BUTTON || event.type === \"keyup\" && event.key !== TAB_KEY$1) {\n                return;\n            }\n            const openToggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE_SHOWN);\n            for (const toggle of openToggles){\n                const context = Dropdown.getInstance(toggle);\n                if (!context || context._config.autoClose === false) {\n                    continue;\n                }\n                const composedPath = event.composedPath();\n                const isMenuTarget = composedPath.includes(context._menu);\n                if (composedPath.includes(context._element) || context._config.autoClose === \"inside\" && !isMenuTarget || context._config.autoClose === \"outside\" && isMenuTarget) {\n                    continue;\n                }\n                // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu\n                if (context._menu.contains(event.target) && (event.type === \"keyup\" && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) {\n                    continue;\n                }\n                const relatedTarget = {\n                    relatedTarget: context._element\n                };\n                if (event.type === \"click\") {\n                    relatedTarget.clickEvent = event;\n                }\n                context._completeHide(relatedTarget);\n            }\n        }\n        static dataApiKeydownHandler(event) {\n            // If not an UP | DOWN | ESCAPE key => not a dropdown command\n            // If input/textarea && if key is other than ESCAPE => not a dropdown command\n            const isInput = /input|textarea/i.test(event.target.tagName);\n            const isEscapeEvent = event.key === ESCAPE_KEY$2;\n            const isUpOrDownEvent = [\n                ARROW_UP_KEY$1,\n                ARROW_DOWN_KEY$1\n            ].includes(event.key);\n            if (!isUpOrDownEvent && !isEscapeEvent) {\n                return;\n            }\n            if (isInput && !isEscapeEvent) {\n                return;\n            }\n            event.preventDefault();\n            // TODO: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.3/forms/input-group/\n            const getToggleButton = this.matches(SELECTOR_DATA_TOGGLE$3) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.next(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.findOne(SELECTOR_DATA_TOGGLE$3, event.delegateTarget.parentNode);\n            const instance = Dropdown.getOrCreateInstance(getToggleButton);\n            if (isUpOrDownEvent) {\n                event.stopPropagation();\n                instance.show();\n                instance._selectMenuItem(event);\n                return;\n            }\n            if (instance._isShown()) {\n                // else is escape and we check if it is shown\n                event.stopPropagation();\n                instance.hide();\n                getToggleButton.focus();\n            }\n        }\n        constructor(element, config){\n            super(element, config);\n            this._popper = null;\n            this._parent = this._element.parentNode; // dropdown wrapper\n            // TODO: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.3/forms/input-group/\n            this._menu = SelectorEngine.next(this._element, SELECTOR_MENU)[0] || SelectorEngine.prev(this._element, SELECTOR_MENU)[0] || SelectorEngine.findOne(SELECTOR_MENU, this._parent);\n            this._inNavbar = this._detectNavbar();\n        }\n    }\n    /**\n   * Data API implementation\n   */ EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);\n    EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);\n    EventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);\n    EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);\n    EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function(event) {\n        event.preventDefault();\n        Dropdown.getOrCreateInstance(this).toggle();\n    });\n    /**\n   * jQuery\n   */ defineJQueryPlugin(Dropdown);\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap util/backdrop.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$9 = \"backdrop\";\n    const CLASS_NAME_FADE$4 = \"fade\";\n    const CLASS_NAME_SHOW$5 = \"show\";\n    const EVENT_MOUSEDOWN = \"mousedown.bs.\".concat(NAME$9);\n    const Default$8 = {\n        className: \"modal-backdrop\",\n        clickCallback: null,\n        isAnimated: false,\n        isVisible: true,\n        // if false, we use the backdrop helper without adding any element to the dom\n        rootElement: \"body\" // give the choice to place backdrop under different elements\n    };\n    const DefaultType$8 = {\n        className: \"string\",\n        clickCallback: \"(function|null)\",\n        isAnimated: \"boolean\",\n        isVisible: \"boolean\",\n        rootElement: \"(element|string)\"\n    };\n    /**\n   * Class definition\n   */ class Backdrop extends Config {\n        // Getters\n        static get Default() {\n            return Default$8;\n        }\n        static get DefaultType() {\n            return DefaultType$8;\n        }\n        static get NAME() {\n            return NAME$9;\n        }\n        // Public\n        show(callback) {\n            if (!this._config.isVisible) {\n                execute(callback);\n                return;\n            }\n            this._append();\n            const element = this._getElement();\n            if (this._config.isAnimated) {\n                reflow(element);\n            }\n            element.classList.add(CLASS_NAME_SHOW$5);\n            this._emulateAnimation(()=>{\n                execute(callback);\n            });\n        }\n        hide(callback) {\n            if (!this._config.isVisible) {\n                execute(callback);\n                return;\n            }\n            this._getElement().classList.remove(CLASS_NAME_SHOW$5);\n            this._emulateAnimation(()=>{\n                this.dispose();\n                execute(callback);\n            });\n        }\n        dispose() {\n            if (!this._isAppended) {\n                return;\n            }\n            EventHandler.off(this._element, EVENT_MOUSEDOWN);\n            this._element.remove();\n            this._isAppended = false;\n        }\n        // Private\n        _getElement() {\n            if (!this._element) {\n                const backdrop = document.createElement(\"div\");\n                backdrop.className = this._config.className;\n                if (this._config.isAnimated) {\n                    backdrop.classList.add(CLASS_NAME_FADE$4);\n                }\n                this._element = backdrop;\n            }\n            return this._element;\n        }\n        _configAfterMerge(config) {\n            // use getElement() with the default \"body\" to get a fresh Element on each instantiation\n            config.rootElement = getElement(config.rootElement);\n            return config;\n        }\n        _append() {\n            if (this._isAppended) {\n                return;\n            }\n            const element = this._getElement();\n            this._config.rootElement.append(element);\n            EventHandler.on(element, EVENT_MOUSEDOWN, ()=>{\n                execute(this._config.clickCallback);\n            });\n            this._isAppended = true;\n        }\n        _emulateAnimation(callback) {\n            executeAfterTransition(callback, this._getElement(), this._config.isAnimated);\n        }\n        constructor(config){\n            super();\n            this._config = this._getConfig(config);\n            this._isAppended = false;\n            this._element = null;\n        }\n    }\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap util/focustrap.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$8 = \"focustrap\";\n    const DATA_KEY$5 = \"bs.focustrap\";\n    const EVENT_KEY$5 = \".\".concat(DATA_KEY$5);\n    const EVENT_FOCUSIN$2 = \"focusin\".concat(EVENT_KEY$5);\n    const EVENT_KEYDOWN_TAB = \"keydown.tab\".concat(EVENT_KEY$5);\n    const TAB_KEY = \"Tab\";\n    const TAB_NAV_FORWARD = \"forward\";\n    const TAB_NAV_BACKWARD = \"backward\";\n    const Default$7 = {\n        autofocus: true,\n        trapElement: null // The element to trap focus inside of\n    };\n    const DefaultType$7 = {\n        autofocus: \"boolean\",\n        trapElement: \"element\"\n    };\n    /**\n   * Class definition\n   */ class FocusTrap extends Config {\n        // Getters\n        static get Default() {\n            return Default$7;\n        }\n        static get DefaultType() {\n            return DefaultType$7;\n        }\n        static get NAME() {\n            return NAME$8;\n        }\n        // Public\n        activate() {\n            if (this._isActive) {\n                return;\n            }\n            if (this._config.autofocus) {\n                this._config.trapElement.focus();\n            }\n            EventHandler.off(document, EVENT_KEY$5); // guard against infinite focus loop\n            EventHandler.on(document, EVENT_FOCUSIN$2, (event)=>this._handleFocusin(event));\n            EventHandler.on(document, EVENT_KEYDOWN_TAB, (event)=>this._handleKeydown(event));\n            this._isActive = true;\n        }\n        deactivate() {\n            if (!this._isActive) {\n                return;\n            }\n            this._isActive = false;\n            EventHandler.off(document, EVENT_KEY$5);\n        }\n        // Private\n        _handleFocusin(event) {\n            const { trapElement } = this._config;\n            if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) {\n                return;\n            }\n            const elements = SelectorEngine.focusableChildren(trapElement);\n            if (elements.length === 0) {\n                trapElement.focus();\n            } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {\n                elements[elements.length - 1].focus();\n            } else {\n                elements[0].focus();\n            }\n        }\n        _handleKeydown(event) {\n            if (event.key !== TAB_KEY) {\n                return;\n            }\n            this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;\n        }\n        constructor(config){\n            super();\n            this._config = this._getConfig(config);\n            this._isActive = false;\n            this._lastTabNavDirection = null;\n        }\n    }\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap util/scrollBar.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const SELECTOR_FIXED_CONTENT = \".fixed-top, .fixed-bottom, .is-fixed, .sticky-top\";\n    const SELECTOR_STICKY_CONTENT = \".sticky-top\";\n    const PROPERTY_PADDING = \"padding-right\";\n    const PROPERTY_MARGIN = \"margin-right\";\n    /**\n   * Class definition\n   */ class ScrollBarHelper {\n        // Public\n        getWidth() {\n            // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes\n            const documentWidth = document.documentElement.clientWidth;\n            return Math.abs(window.innerWidth - documentWidth);\n        }\n        hide() {\n            const width = this.getWidth();\n            this._disableOverFlow();\n            // give padding to element to balance the hidden scrollbar width\n            this._setElementAttributes(this._element, PROPERTY_PADDING, (calculatedValue)=>calculatedValue + width);\n            // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth\n            this._setElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING, (calculatedValue)=>calculatedValue + width);\n            this._setElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN, (calculatedValue)=>calculatedValue - width);\n        }\n        reset() {\n            this._resetElementAttributes(this._element, \"overflow\");\n            this._resetElementAttributes(this._element, PROPERTY_PADDING);\n            this._resetElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING);\n            this._resetElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN);\n        }\n        isOverflowing() {\n            return this.getWidth() > 0;\n        }\n        // Private\n        _disableOverFlow() {\n            this._saveInitialAttribute(this._element, \"overflow\");\n            this._element.style.overflow = \"hidden\";\n        }\n        _setElementAttributes(selector, styleProperty, callback) {\n            const scrollbarWidth = this.getWidth();\n            const manipulationCallBack = (element)=>{\n                if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) {\n                    return;\n                }\n                this._saveInitialAttribute(element, styleProperty);\n                const calculatedValue = window.getComputedStyle(element).getPropertyValue(styleProperty);\n                element.style.setProperty(styleProperty, \"\".concat(callback(Number.parseFloat(calculatedValue)), \"px\"));\n            };\n            this._applyManipulationCallback(selector, manipulationCallBack);\n        }\n        _saveInitialAttribute(element, styleProperty) {\n            const actualValue = element.style.getPropertyValue(styleProperty);\n            if (actualValue) {\n                Manipulator.setDataAttribute(element, styleProperty, actualValue);\n            }\n        }\n        _resetElementAttributes(selector, styleProperty) {\n            const manipulationCallBack = (element)=>{\n                const value = Manipulator.getDataAttribute(element, styleProperty);\n                // We only want to remove the property if the value is `null`; the value can also be zero\n                if (value === null) {\n                    element.style.removeProperty(styleProperty);\n                    return;\n                }\n                Manipulator.removeDataAttribute(element, styleProperty);\n                element.style.setProperty(styleProperty, value);\n            };\n            this._applyManipulationCallback(selector, manipulationCallBack);\n        }\n        _applyManipulationCallback(selector, callBack) {\n            if (isElement$1(selector)) {\n                callBack(selector);\n                return;\n            }\n            for (const sel of SelectorEngine.find(selector, this._element)){\n                callBack(sel);\n            }\n        }\n        constructor(){\n            this._element = document.body;\n        }\n    }\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap modal.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$7 = \"modal\";\n    const DATA_KEY$4 = \"bs.modal\";\n    const EVENT_KEY$4 = \".\".concat(DATA_KEY$4);\n    const DATA_API_KEY$2 = \".data-api\";\n    const ESCAPE_KEY$1 = \"Escape\";\n    const EVENT_HIDE$4 = \"hide\".concat(EVENT_KEY$4);\n    const EVENT_HIDE_PREVENTED$1 = \"hidePrevented\".concat(EVENT_KEY$4);\n    const EVENT_HIDDEN$4 = \"hidden\".concat(EVENT_KEY$4);\n    const EVENT_SHOW$4 = \"show\".concat(EVENT_KEY$4);\n    const EVENT_SHOWN$4 = \"shown\".concat(EVENT_KEY$4);\n    const EVENT_RESIZE$1 = \"resize\".concat(EVENT_KEY$4);\n    const EVENT_CLICK_DISMISS = \"click.dismiss\".concat(EVENT_KEY$4);\n    const EVENT_MOUSEDOWN_DISMISS = \"mousedown.dismiss\".concat(EVENT_KEY$4);\n    const EVENT_KEYDOWN_DISMISS$1 = \"keydown.dismiss\".concat(EVENT_KEY$4);\n    const EVENT_CLICK_DATA_API$2 = \"click\".concat(EVENT_KEY$4).concat(DATA_API_KEY$2);\n    const CLASS_NAME_OPEN = \"modal-open\";\n    const CLASS_NAME_FADE$3 = \"fade\";\n    const CLASS_NAME_SHOW$4 = \"show\";\n    const CLASS_NAME_STATIC = \"modal-static\";\n    const OPEN_SELECTOR$1 = \".modal.show\";\n    const SELECTOR_DIALOG = \".modal-dialog\";\n    const SELECTOR_MODAL_BODY = \".modal-body\";\n    const SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle=\"modal\"]';\n    const Default$6 = {\n        backdrop: true,\n        focus: true,\n        keyboard: true\n    };\n    const DefaultType$6 = {\n        backdrop: \"(boolean|string)\",\n        focus: \"boolean\",\n        keyboard: \"boolean\"\n    };\n    /**\n   * Class definition\n   */ class Modal extends BaseComponent {\n        // Getters\n        static get Default() {\n            return Default$6;\n        }\n        static get DefaultType() {\n            return DefaultType$6;\n        }\n        static get NAME() {\n            return NAME$7;\n        }\n        // Public\n        toggle(relatedTarget) {\n            return this._isShown ? this.hide() : this.show(relatedTarget);\n        }\n        show(relatedTarget) {\n            if (this._isShown || this._isTransitioning) {\n                return;\n            }\n            const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, {\n                relatedTarget\n            });\n            if (showEvent.defaultPrevented) {\n                return;\n            }\n            this._isShown = true;\n            this._isTransitioning = true;\n            this._scrollBar.hide();\n            document.body.classList.add(CLASS_NAME_OPEN);\n            this._adjustDialog();\n            this._backdrop.show(()=>this._showElement(relatedTarget));\n        }\n        hide() {\n            if (!this._isShown || this._isTransitioning) {\n                return;\n            }\n            const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4);\n            if (hideEvent.defaultPrevented) {\n                return;\n            }\n            this._isShown = false;\n            this._isTransitioning = true;\n            this._focustrap.deactivate();\n            this._element.classList.remove(CLASS_NAME_SHOW$4);\n            this._queueCallback(()=>this._hideModal(), this._element, this._isAnimated());\n        }\n        dispose() {\n            EventHandler.off(window, EVENT_KEY$4);\n            EventHandler.off(this._dialog, EVENT_KEY$4);\n            this._backdrop.dispose();\n            this._focustrap.deactivate();\n            super.dispose();\n        }\n        handleUpdate() {\n            this._adjustDialog();\n        }\n        // Private\n        _initializeBackDrop() {\n            return new Backdrop({\n                isVisible: Boolean(this._config.backdrop),\n                // 'static' option will be translated to true, and booleans will keep their value,\n                isAnimated: this._isAnimated()\n            });\n        }\n        _initializeFocusTrap() {\n            return new FocusTrap({\n                trapElement: this._element\n            });\n        }\n        _showElement(relatedTarget) {\n            // try to append dynamic modal\n            if (!document.body.contains(this._element)) {\n                document.body.append(this._element);\n            }\n            this._element.style.display = \"block\";\n            this._element.removeAttribute(\"aria-hidden\");\n            this._element.setAttribute(\"aria-modal\", true);\n            this._element.setAttribute(\"role\", \"dialog\");\n            this._element.scrollTop = 0;\n            const modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);\n            if (modalBody) {\n                modalBody.scrollTop = 0;\n            }\n            reflow(this._element);\n            this._element.classList.add(CLASS_NAME_SHOW$4);\n            const transitionComplete = ()=>{\n                if (this._config.focus) {\n                    this._focustrap.activate();\n                }\n                this._isTransitioning = false;\n                EventHandler.trigger(this._element, EVENT_SHOWN$4, {\n                    relatedTarget\n                });\n            };\n            this._queueCallback(transitionComplete, this._dialog, this._isAnimated());\n        }\n        _addEventListeners() {\n            EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, (event)=>{\n                if (event.key !== ESCAPE_KEY$1) {\n                    return;\n                }\n                if (this._config.keyboard) {\n                    this.hide();\n                    return;\n                }\n                this._triggerBackdropTransition();\n            });\n            EventHandler.on(window, EVENT_RESIZE$1, ()=>{\n                if (this._isShown && !this._isTransitioning) {\n                    this._adjustDialog();\n                }\n            });\n            EventHandler.on(this._element, EVENT_MOUSEDOWN_DISMISS, (event)=>{\n                // a bad trick to segregate clicks that may start inside dialog but end outside, and avoid listen to scrollbar clicks\n                EventHandler.one(this._element, EVENT_CLICK_DISMISS, (event2)=>{\n                    if (this._element !== event.target || this._element !== event2.target) {\n                        return;\n                    }\n                    if (this._config.backdrop === \"static\") {\n                        this._triggerBackdropTransition();\n                        return;\n                    }\n                    if (this._config.backdrop) {\n                        this.hide();\n                    }\n                });\n            });\n        }\n        _hideModal() {\n            this._element.style.display = \"none\";\n            this._element.setAttribute(\"aria-hidden\", true);\n            this._element.removeAttribute(\"aria-modal\");\n            this._element.removeAttribute(\"role\");\n            this._isTransitioning = false;\n            this._backdrop.hide(()=>{\n                document.body.classList.remove(CLASS_NAME_OPEN);\n                this._resetAdjustments();\n                this._scrollBar.reset();\n                EventHandler.trigger(this._element, EVENT_HIDDEN$4);\n            });\n        }\n        _isAnimated() {\n            return this._element.classList.contains(CLASS_NAME_FADE$3);\n        }\n        _triggerBackdropTransition() {\n            const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED$1);\n            if (hideEvent.defaultPrevented) {\n                return;\n            }\n            const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\n            const initialOverflowY = this._element.style.overflowY;\n            // return if the following background transition hasn't yet completed\n            if (initialOverflowY === \"hidden\" || this._element.classList.contains(CLASS_NAME_STATIC)) {\n                return;\n            }\n            if (!isModalOverflowing) {\n                this._element.style.overflowY = \"hidden\";\n            }\n            this._element.classList.add(CLASS_NAME_STATIC);\n            this._queueCallback(()=>{\n                this._element.classList.remove(CLASS_NAME_STATIC);\n                this._queueCallback(()=>{\n                    this._element.style.overflowY = initialOverflowY;\n                }, this._dialog);\n            }, this._dialog);\n            this._element.focus();\n        }\n        /**\n     * The following methods are used to handle overflowing modals\n     */ _adjustDialog() {\n            const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\n            const scrollbarWidth = this._scrollBar.getWidth();\n            const isBodyOverflowing = scrollbarWidth > 0;\n            if (isBodyOverflowing && !isModalOverflowing) {\n                const property = isRTL() ? \"paddingLeft\" : \"paddingRight\";\n                this._element.style[property] = \"\".concat(scrollbarWidth, \"px\");\n            }\n            if (!isBodyOverflowing && isModalOverflowing) {\n                const property = isRTL() ? \"paddingRight\" : \"paddingLeft\";\n                this._element.style[property] = \"\".concat(scrollbarWidth, \"px\");\n            }\n        }\n        _resetAdjustments() {\n            this._element.style.paddingLeft = \"\";\n            this._element.style.paddingRight = \"\";\n        }\n        // Static\n        static jQueryInterface(config, relatedTarget) {\n            return this.each(function() {\n                const data = Modal.getOrCreateInstance(this, config);\n                if (typeof config !== \"string\") {\n                    return;\n                }\n                if (typeof data[config] === \"undefined\") {\n                    throw new TypeError('No method named \"'.concat(config, '\"'));\n                }\n                data[config](relatedTarget);\n            });\n        }\n        constructor(element, config){\n            super(element, config);\n            this._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, this._element);\n            this._backdrop = this._initializeBackDrop();\n            this._focustrap = this._initializeFocusTrap();\n            this._isShown = false;\n            this._isTransitioning = false;\n            this._scrollBar = new ScrollBarHelper();\n            this._addEventListeners();\n        }\n    }\n    /**\n   * Data API implementation\n   */ EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function(event) {\n        const target = SelectorEngine.getElementFromSelector(this);\n        if ([\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName)) {\n            event.preventDefault();\n        }\n        EventHandler.one(target, EVENT_SHOW$4, (showEvent)=>{\n            if (showEvent.defaultPrevented) {\n                // only register focus restorer if modal will actually get shown\n                return;\n            }\n            EventHandler.one(target, EVENT_HIDDEN$4, ()=>{\n                if (isVisible(this)) {\n                    this.focus();\n                }\n            });\n        });\n        // avoid conflict when clicking modal toggler while another one is open\n        const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR$1);\n        if (alreadyOpen) {\n            Modal.getInstance(alreadyOpen).hide();\n        }\n        const data = Modal.getOrCreateInstance(target);\n        data.toggle(this);\n    });\n    enableDismissTrigger(Modal);\n    /**\n   * jQuery\n   */ defineJQueryPlugin(Modal);\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap offcanvas.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$6 = \"offcanvas\";\n    const DATA_KEY$3 = \"bs.offcanvas\";\n    const EVENT_KEY$3 = \".\".concat(DATA_KEY$3);\n    const DATA_API_KEY$1 = \".data-api\";\n    const EVENT_LOAD_DATA_API$2 = \"load\".concat(EVENT_KEY$3).concat(DATA_API_KEY$1);\n    const ESCAPE_KEY = \"Escape\";\n    const CLASS_NAME_SHOW$3 = \"show\";\n    const CLASS_NAME_SHOWING$1 = \"showing\";\n    const CLASS_NAME_HIDING = \"hiding\";\n    const CLASS_NAME_BACKDROP = \"offcanvas-backdrop\";\n    const OPEN_SELECTOR = \".offcanvas.show\";\n    const EVENT_SHOW$3 = \"show\".concat(EVENT_KEY$3);\n    const EVENT_SHOWN$3 = \"shown\".concat(EVENT_KEY$3);\n    const EVENT_HIDE$3 = \"hide\".concat(EVENT_KEY$3);\n    const EVENT_HIDE_PREVENTED = \"hidePrevented\".concat(EVENT_KEY$3);\n    const EVENT_HIDDEN$3 = \"hidden\".concat(EVENT_KEY$3);\n    const EVENT_RESIZE = \"resize\".concat(EVENT_KEY$3);\n    const EVENT_CLICK_DATA_API$1 = \"click\".concat(EVENT_KEY$3).concat(DATA_API_KEY$1);\n    const EVENT_KEYDOWN_DISMISS = \"keydown.dismiss\".concat(EVENT_KEY$3);\n    const SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle=\"offcanvas\"]';\n    const Default$5 = {\n        backdrop: true,\n        keyboard: true,\n        scroll: false\n    };\n    const DefaultType$5 = {\n        backdrop: \"(boolean|string)\",\n        keyboard: \"boolean\",\n        scroll: \"boolean\"\n    };\n    /**\n   * Class definition\n   */ class Offcanvas extends BaseComponent {\n        // Getters\n        static get Default() {\n            return Default$5;\n        }\n        static get DefaultType() {\n            return DefaultType$5;\n        }\n        static get NAME() {\n            return NAME$6;\n        }\n        // Public\n        toggle(relatedTarget) {\n            return this._isShown ? this.hide() : this.show(relatedTarget);\n        }\n        show(relatedTarget) {\n            if (this._isShown) {\n                return;\n            }\n            const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {\n                relatedTarget\n            });\n            if (showEvent.defaultPrevented) {\n                return;\n            }\n            this._isShown = true;\n            this._backdrop.show();\n            if (!this._config.scroll) {\n                new ScrollBarHelper().hide();\n            }\n            this._element.setAttribute(\"aria-modal\", true);\n            this._element.setAttribute(\"role\", \"dialog\");\n            this._element.classList.add(CLASS_NAME_SHOWING$1);\n            const completeCallBack = ()=>{\n                if (!this._config.scroll || this._config.backdrop) {\n                    this._focustrap.activate();\n                }\n                this._element.classList.add(CLASS_NAME_SHOW$3);\n                this._element.classList.remove(CLASS_NAME_SHOWING$1);\n                EventHandler.trigger(this._element, EVENT_SHOWN$3, {\n                    relatedTarget\n                });\n            };\n            this._queueCallback(completeCallBack, this._element, true);\n        }\n        hide() {\n            if (!this._isShown) {\n                return;\n            }\n            const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);\n            if (hideEvent.defaultPrevented) {\n                return;\n            }\n            this._focustrap.deactivate();\n            this._element.blur();\n            this._isShown = false;\n            this._element.classList.add(CLASS_NAME_HIDING);\n            this._backdrop.hide();\n            const completeCallback = ()=>{\n                this._element.classList.remove(CLASS_NAME_SHOW$3, CLASS_NAME_HIDING);\n                this._element.removeAttribute(\"aria-modal\");\n                this._element.removeAttribute(\"role\");\n                if (!this._config.scroll) {\n                    new ScrollBarHelper().reset();\n                }\n                EventHandler.trigger(this._element, EVENT_HIDDEN$3);\n            };\n            this._queueCallback(completeCallback, this._element, true);\n        }\n        dispose() {\n            this._backdrop.dispose();\n            this._focustrap.deactivate();\n            super.dispose();\n        }\n        // Private\n        _initializeBackDrop() {\n            const clickCallback = ()=>{\n                if (this._config.backdrop === \"static\") {\n                    EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);\n                    return;\n                }\n                this.hide();\n            };\n            // 'static' option will be translated to true, and booleans will keep their value\n            const isVisible = Boolean(this._config.backdrop);\n            return new Backdrop({\n                className: CLASS_NAME_BACKDROP,\n                isVisible,\n                isAnimated: true,\n                rootElement: this._element.parentNode,\n                clickCallback: isVisible ? clickCallback : null\n            });\n        }\n        _initializeFocusTrap() {\n            return new FocusTrap({\n                trapElement: this._element\n            });\n        }\n        _addEventListeners() {\n            EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, (event)=>{\n                if (event.key !== ESCAPE_KEY) {\n                    return;\n                }\n                if (this._config.keyboard) {\n                    this.hide();\n                    return;\n                }\n                EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);\n            });\n        }\n        // Static\n        static jQueryInterface(config) {\n            return this.each(function() {\n                const data = Offcanvas.getOrCreateInstance(this, config);\n                if (typeof config !== \"string\") {\n                    return;\n                }\n                if (data[config] === undefined || config.startsWith(\"_\") || config === \"constructor\") {\n                    throw new TypeError('No method named \"'.concat(config, '\"'));\n                }\n                data[config](this);\n            });\n        }\n        constructor(element, config){\n            super(element, config);\n            this._isShown = false;\n            this._backdrop = this._initializeBackDrop();\n            this._focustrap = this._initializeFocusTrap();\n            this._addEventListeners();\n        }\n    }\n    /**\n   * Data API implementation\n   */ EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function(event) {\n        const target = SelectorEngine.getElementFromSelector(this);\n        if ([\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName)) {\n            event.preventDefault();\n        }\n        if (isDisabled(this)) {\n            return;\n        }\n        EventHandler.one(target, EVENT_HIDDEN$3, ()=>{\n            // focus on trigger when it is closed\n            if (isVisible(this)) {\n                this.focus();\n            }\n        });\n        // avoid conflict when clicking a toggler of an offcanvas, while another is open\n        const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);\n        if (alreadyOpen && alreadyOpen !== target) {\n            Offcanvas.getInstance(alreadyOpen).hide();\n        }\n        const data = Offcanvas.getOrCreateInstance(target);\n        data.toggle(this);\n    });\n    EventHandler.on(window, EVENT_LOAD_DATA_API$2, ()=>{\n        for (const selector of SelectorEngine.find(OPEN_SELECTOR)){\n            Offcanvas.getOrCreateInstance(selector).show();\n        }\n    });\n    EventHandler.on(window, EVENT_RESIZE, ()=>{\n        for (const element of SelectorEngine.find(\"[aria-modal][class*=show][class*=offcanvas-]\")){\n            if (getComputedStyle(element).position !== \"fixed\") {\n                Offcanvas.getOrCreateInstance(element).hide();\n            }\n        }\n    });\n    enableDismissTrigger(Offcanvas);\n    /**\n   * jQuery\n   */ defineJQueryPlugin(Offcanvas);\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap util/sanitizer.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ // js-docs-start allow-list\n    const ARIA_ATTRIBUTE_PATTERN = /^aria-[\\w-]*$/i;\n    const DefaultAllowlist = {\n        // Global attributes allowed on any supplied element below.\n        \"*\": [\n            \"class\",\n            \"dir\",\n            \"id\",\n            \"lang\",\n            \"role\",\n            ARIA_ATTRIBUTE_PATTERN\n        ],\n        a: [\n            \"target\",\n            \"href\",\n            \"title\",\n            \"rel\"\n        ],\n        area: [],\n        b: [],\n        br: [],\n        col: [],\n        code: [],\n        dd: [],\n        div: [],\n        dl: [],\n        dt: [],\n        em: [],\n        hr: [],\n        h1: [],\n        h2: [],\n        h3: [],\n        h4: [],\n        h5: [],\n        h6: [],\n        i: [],\n        img: [\n            \"src\",\n            \"srcset\",\n            \"alt\",\n            \"title\",\n            \"width\",\n            \"height\"\n        ],\n        li: [],\n        ol: [],\n        p: [],\n        pre: [],\n        s: [],\n        small: [],\n        span: [],\n        sub: [],\n        sup: [],\n        strong: [],\n        u: [],\n        ul: []\n    };\n    // js-docs-end allow-list\n    const uriAttributes = new Set([\n        \"background\",\n        \"cite\",\n        \"href\",\n        \"itemtype\",\n        \"longdesc\",\n        \"poster\",\n        \"src\",\n        \"xlink:href\"\n    ]);\n    /**\n   * A pattern that recognizes URLs that are safe wrt. XSS in URL navigation\n   * contexts.\n   *\n   * Shout-out to Angular https://github.com/angular/angular/blob/15.2.8/packages/core/src/sanitization/url_sanitizer.ts#L38\n   */ // eslint-disable-next-line unicorn/better-regex\n    const SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i;\n    const allowedAttribute = (attribute, allowedAttributeList)=>{\n        const attributeName = attribute.nodeName.toLowerCase();\n        if (allowedAttributeList.includes(attributeName)) {\n            if (uriAttributes.has(attributeName)) {\n                return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue));\n            }\n            return true;\n        }\n        // Check if a regular expression validates the attribute.\n        return allowedAttributeList.filter((attributeRegex)=>attributeRegex instanceof RegExp).some((regex)=>regex.test(attributeName));\n    };\n    function sanitizeHtml(unsafeHtml, allowList, sanitizeFunction) {\n        if (!unsafeHtml.length) {\n            return unsafeHtml;\n        }\n        if (sanitizeFunction && typeof sanitizeFunction === \"function\") {\n            return sanitizeFunction(unsafeHtml);\n        }\n        const domParser = new window.DOMParser();\n        const createdDocument = domParser.parseFromString(unsafeHtml, \"text/html\");\n        const elements = [].concat(...createdDocument.body.querySelectorAll(\"*\"));\n        for (const element of elements){\n            const elementName = element.nodeName.toLowerCase();\n            if (!Object.keys(allowList).includes(elementName)) {\n                element.remove();\n                continue;\n            }\n            const attributeList = [].concat(...element.attributes);\n            const allowedAttributes = [].concat(allowList[\"*\"] || [], allowList[elementName] || []);\n            for (const attribute of attributeList){\n                if (!allowedAttribute(attribute, allowedAttributes)) {\n                    element.removeAttribute(attribute.nodeName);\n                }\n            }\n        }\n        return createdDocument.body.innerHTML;\n    }\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap util/template-factory.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$5 = \"TemplateFactory\";\n    const Default$4 = {\n        allowList: DefaultAllowlist,\n        content: {},\n        // { selector : text ,  selector2 : text2 , }\n        extraClass: \"\",\n        html: false,\n        sanitize: true,\n        sanitizeFn: null,\n        template: \"<div></div>\"\n    };\n    const DefaultType$4 = {\n        allowList: \"object\",\n        content: \"object\",\n        extraClass: \"(string|function)\",\n        html: \"boolean\",\n        sanitize: \"boolean\",\n        sanitizeFn: \"(null|function)\",\n        template: \"string\"\n    };\n    const DefaultContentType = {\n        entry: \"(string|element|function|null)\",\n        selector: \"(string|element)\"\n    };\n    /**\n   * Class definition\n   */ class TemplateFactory extends Config {\n        // Getters\n        static get Default() {\n            return Default$4;\n        }\n        static get DefaultType() {\n            return DefaultType$4;\n        }\n        static get NAME() {\n            return NAME$5;\n        }\n        // Public\n        getContent() {\n            return Object.values(this._config.content).map((config)=>this._resolvePossibleFunction(config)).filter(Boolean);\n        }\n        hasContent() {\n            return this.getContent().length > 0;\n        }\n        changeContent(content) {\n            this._checkContent(content);\n            this._config.content = {\n                ...this._config.content,\n                ...content\n            };\n            return this;\n        }\n        toHtml() {\n            const templateWrapper = document.createElement(\"div\");\n            templateWrapper.innerHTML = this._maybeSanitize(this._config.template);\n            for (const [selector, text] of Object.entries(this._config.content)){\n                this._setContent(templateWrapper, text, selector);\n            }\n            const template = templateWrapper.children[0];\n            const extraClass = this._resolvePossibleFunction(this._config.extraClass);\n            if (extraClass) {\n                template.classList.add(...extraClass.split(\" \"));\n            }\n            return template;\n        }\n        // Private\n        _typeCheckConfig(config) {\n            super._typeCheckConfig(config);\n            this._checkContent(config.content);\n        }\n        _checkContent(arg) {\n            for (const [selector, content] of Object.entries(arg)){\n                super._typeCheckConfig({\n                    selector,\n                    entry: content\n                }, DefaultContentType);\n            }\n        }\n        _setContent(template, content, selector) {\n            const templateElement = SelectorEngine.findOne(selector, template);\n            if (!templateElement) {\n                return;\n            }\n            content = this._resolvePossibleFunction(content);\n            if (!content) {\n                templateElement.remove();\n                return;\n            }\n            if (isElement$1(content)) {\n                this._putElementInTemplate(getElement(content), templateElement);\n                return;\n            }\n            if (this._config.html) {\n                templateElement.innerHTML = this._maybeSanitize(content);\n                return;\n            }\n            templateElement.textContent = content;\n        }\n        _maybeSanitize(arg) {\n            return this._config.sanitize ? sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg;\n        }\n        _resolvePossibleFunction(arg) {\n            return execute(arg, [\n                this\n            ]);\n        }\n        _putElementInTemplate(element, templateElement) {\n            if (this._config.html) {\n                templateElement.innerHTML = \"\";\n                templateElement.append(element);\n                return;\n            }\n            templateElement.textContent = element.textContent;\n        }\n        constructor(config){\n            super();\n            this._config = this._getConfig(config);\n        }\n    }\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap tooltip.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$4 = \"tooltip\";\n    const DISALLOWED_ATTRIBUTES = new Set([\n        \"sanitize\",\n        \"allowList\",\n        \"sanitizeFn\"\n    ]);\n    const CLASS_NAME_FADE$2 = \"fade\";\n    const CLASS_NAME_MODAL = \"modal\";\n    const CLASS_NAME_SHOW$2 = \"show\";\n    const SELECTOR_TOOLTIP_INNER = \".tooltip-inner\";\n    const SELECTOR_MODAL = \".\".concat(CLASS_NAME_MODAL);\n    const EVENT_MODAL_HIDE = \"hide.bs.modal\";\n    const TRIGGER_HOVER = \"hover\";\n    const TRIGGER_FOCUS = \"focus\";\n    const TRIGGER_CLICK = \"click\";\n    const TRIGGER_MANUAL = \"manual\";\n    const EVENT_HIDE$2 = \"hide\";\n    const EVENT_HIDDEN$2 = \"hidden\";\n    const EVENT_SHOW$2 = \"show\";\n    const EVENT_SHOWN$2 = \"shown\";\n    const EVENT_INSERTED = \"inserted\";\n    const EVENT_CLICK$1 = \"click\";\n    const EVENT_FOCUSIN$1 = \"focusin\";\n    const EVENT_FOCUSOUT$1 = \"focusout\";\n    const EVENT_MOUSEENTER = \"mouseenter\";\n    const EVENT_MOUSELEAVE = \"mouseleave\";\n    const AttachmentMap = {\n        AUTO: \"auto\",\n        TOP: \"top\",\n        RIGHT: isRTL() ? \"left\" : \"right\",\n        BOTTOM: \"bottom\",\n        LEFT: isRTL() ? \"right\" : \"left\"\n    };\n    const Default$3 = {\n        allowList: DefaultAllowlist,\n        animation: true,\n        boundary: \"clippingParents\",\n        container: false,\n        customClass: \"\",\n        delay: 0,\n        fallbackPlacements: [\n            \"top\",\n            \"right\",\n            \"bottom\",\n            \"left\"\n        ],\n        html: false,\n        offset: [\n            0,\n            6\n        ],\n        placement: \"top\",\n        popperConfig: null,\n        sanitize: true,\n        sanitizeFn: null,\n        selector: false,\n        template: '<div class=\"tooltip\" role=\"tooltip\">' + '<div class=\"tooltip-arrow\"></div>' + '<div class=\"tooltip-inner\"></div>' + \"</div>\",\n        title: \"\",\n        trigger: \"hover focus\"\n    };\n    const DefaultType$3 = {\n        allowList: \"object\",\n        animation: \"boolean\",\n        boundary: \"(string|element)\",\n        container: \"(string|element|boolean)\",\n        customClass: \"(string|function)\",\n        delay: \"(number|object)\",\n        fallbackPlacements: \"array\",\n        html: \"boolean\",\n        offset: \"(array|string|function)\",\n        placement: \"(string|function)\",\n        popperConfig: \"(null|object|function)\",\n        sanitize: \"boolean\",\n        sanitizeFn: \"(null|function)\",\n        selector: \"(string|boolean)\",\n        template: \"string\",\n        title: \"(string|element|function)\",\n        trigger: \"string\"\n    };\n    /**\n   * Class definition\n   */ class Tooltip extends BaseComponent {\n        // Getters\n        static get Default() {\n            return Default$3;\n        }\n        static get DefaultType() {\n            return DefaultType$3;\n        }\n        static get NAME() {\n            return NAME$4;\n        }\n        // Public\n        enable() {\n            this._isEnabled = true;\n        }\n        disable() {\n            this._isEnabled = false;\n        }\n        toggleEnabled() {\n            this._isEnabled = !this._isEnabled;\n        }\n        toggle() {\n            if (!this._isEnabled) {\n                return;\n            }\n            this._activeTrigger.click = !this._activeTrigger.click;\n            if (this._isShown()) {\n                this._leave();\n                return;\n            }\n            this._enter();\n        }\n        dispose() {\n            clearTimeout(this._timeout);\n            EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);\n            if (this._element.getAttribute(\"data-bs-original-title\")) {\n                this._element.setAttribute(\"title\", this._element.getAttribute(\"data-bs-original-title\"));\n            }\n            this._disposePopper();\n            super.dispose();\n        }\n        show() {\n            if (this._element.style.display === \"none\") {\n                throw new Error(\"Please use show on visible elements\");\n            }\n            if (!(this._isWithContent() && this._isEnabled)) {\n                return;\n            }\n            const showEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOW$2));\n            const shadowRoot = findShadowRoot(this._element);\n            const isInTheDom = (shadowRoot || this._element.ownerDocument.documentElement).contains(this._element);\n            if (showEvent.defaultPrevented || !isInTheDom) {\n                return;\n            }\n            // TODO: v6 remove this or make it optional\n            this._disposePopper();\n            const tip = this._getTipElement();\n            this._element.setAttribute(\"aria-describedby\", tip.getAttribute(\"id\"));\n            const { container } = this._config;\n            if (!this._element.ownerDocument.documentElement.contains(this.tip)) {\n                container.append(tip);\n                EventHandler.trigger(this._element, this.constructor.eventName(EVENT_INSERTED));\n            }\n            this._popper = this._createPopper(tip);\n            tip.classList.add(CLASS_NAME_SHOW$2);\n            // If this is a touch-enabled device we add extra\n            // empty mouseover listeners to the body's immediate children;\n            // only needed because of broken event delegation on iOS\n            // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n            if (\"ontouchstart\" in document.documentElement) {\n                for (const element of [].concat(...document.body.children)){\n                    EventHandler.on(element, \"mouseover\", noop);\n                }\n            }\n            const complete = ()=>{\n                EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOWN$2));\n                if (this._isHovered === false) {\n                    this._leave();\n                }\n                this._isHovered = false;\n            };\n            this._queueCallback(complete, this.tip, this._isAnimated());\n        }\n        hide() {\n            if (!this._isShown()) {\n                return;\n            }\n            const hideEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDE$2));\n            if (hideEvent.defaultPrevented) {\n                return;\n            }\n            const tip = this._getTipElement();\n            tip.classList.remove(CLASS_NAME_SHOW$2);\n            // If this is a touch-enabled device we remove the extra\n            // empty mouseover listeners we added for iOS support\n            if (\"ontouchstart\" in document.documentElement) {\n                for (const element of [].concat(...document.body.children)){\n                    EventHandler.off(element, \"mouseover\", noop);\n                }\n            }\n            this._activeTrigger[TRIGGER_CLICK] = false;\n            this._activeTrigger[TRIGGER_FOCUS] = false;\n            this._activeTrigger[TRIGGER_HOVER] = false;\n            this._isHovered = null; // it is a trick to support manual triggering\n            const complete = ()=>{\n                if (this._isWithActiveTrigger()) {\n                    return;\n                }\n                if (!this._isHovered) {\n                    this._disposePopper();\n                }\n                this._element.removeAttribute(\"aria-describedby\");\n                EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDDEN$2));\n            };\n            this._queueCallback(complete, this.tip, this._isAnimated());\n        }\n        update() {\n            if (this._popper) {\n                this._popper.update();\n            }\n        }\n        // Protected\n        _isWithContent() {\n            return Boolean(this._getTitle());\n        }\n        _getTipElement() {\n            if (!this.tip) {\n                this.tip = this._createTipElement(this._newContent || this._getContentForTemplate());\n            }\n            return this.tip;\n        }\n        _createTipElement(content) {\n            const tip = this._getTemplateFactory(content).toHtml();\n            // TODO: remove this check in v6\n            if (!tip) {\n                return null;\n            }\n            tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2);\n            // TODO: v6 the following can be achieved with CSS only\n            tip.classList.add(\"bs-\".concat(this.constructor.NAME, \"-auto\"));\n            const tipId = getUID(this.constructor.NAME).toString();\n            tip.setAttribute(\"id\", tipId);\n            if (this._isAnimated()) {\n                tip.classList.add(CLASS_NAME_FADE$2);\n            }\n            return tip;\n        }\n        setContent(content) {\n            this._newContent = content;\n            if (this._isShown()) {\n                this._disposePopper();\n                this.show();\n            }\n        }\n        _getTemplateFactory(content) {\n            if (this._templateFactory) {\n                this._templateFactory.changeContent(content);\n            } else {\n                this._templateFactory = new TemplateFactory({\n                    ...this._config,\n                    // the `content` var has to be after `this._config`\n                    // to override config.content in case of popover\n                    content,\n                    extraClass: this._resolvePossibleFunction(this._config.customClass)\n                });\n            }\n            return this._templateFactory;\n        }\n        _getContentForTemplate() {\n            return {\n                [SELECTOR_TOOLTIP_INNER]: this._getTitle()\n            };\n        }\n        _getTitle() {\n            return this._resolvePossibleFunction(this._config.title) || this._element.getAttribute(\"data-bs-original-title\");\n        }\n        // Private\n        _initializeOnDelegatedTarget(event) {\n            return this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());\n        }\n        _isAnimated() {\n            return this._config.animation || this.tip && this.tip.classList.contains(CLASS_NAME_FADE$2);\n        }\n        _isShown() {\n            return this.tip && this.tip.classList.contains(CLASS_NAME_SHOW$2);\n        }\n        _createPopper(tip) {\n            const placement = execute(this._config.placement, [\n                this,\n                tip,\n                this._element\n            ]);\n            const attachment = AttachmentMap[placement.toUpperCase()];\n            return createPopper(this._element, tip, this._getPopperConfig(attachment));\n        }\n        _getOffset() {\n            const { offset } = this._config;\n            if (typeof offset === \"string\") {\n                return offset.split(\",\").map((value)=>Number.parseInt(value, 10));\n            }\n            if (typeof offset === \"function\") {\n                return (popperData)=>offset(popperData, this._element);\n            }\n            return offset;\n        }\n        _resolvePossibleFunction(arg) {\n            return execute(arg, [\n                this._element\n            ]);\n        }\n        _getPopperConfig(attachment) {\n            const defaultBsPopperConfig = {\n                placement: attachment,\n                modifiers: [\n                    {\n                        name: \"flip\",\n                        options: {\n                            fallbackPlacements: this._config.fallbackPlacements\n                        }\n                    },\n                    {\n                        name: \"offset\",\n                        options: {\n                            offset: this._getOffset()\n                        }\n                    },\n                    {\n                        name: \"preventOverflow\",\n                        options: {\n                            boundary: this._config.boundary\n                        }\n                    },\n                    {\n                        name: \"arrow\",\n                        options: {\n                            element: \".\".concat(this.constructor.NAME, \"-arrow\")\n                        }\n                    },\n                    {\n                        name: \"preSetPlacement\",\n                        enabled: true,\n                        phase: \"beforeMain\",\n                        fn: (data)=>{\n                            // Pre-set Popper's placement attribute in order to read the arrow sizes properly.\n                            // Otherwise, Popper mixes up the width and height dimensions since the initial arrow style is for top placement\n                            this._getTipElement().setAttribute(\"data-popper-placement\", data.state.placement);\n                        }\n                    }\n                ]\n            };\n            return {\n                ...defaultBsPopperConfig,\n                ...execute(this._config.popperConfig, [\n                    defaultBsPopperConfig\n                ])\n            };\n        }\n        _setListeners() {\n            const triggers = this._config.trigger.split(\" \");\n            for (const trigger of triggers){\n                if (trigger === \"click\") {\n                    EventHandler.on(this._element, this.constructor.eventName(EVENT_CLICK$1), this._config.selector, (event)=>{\n                        const context = this._initializeOnDelegatedTarget(event);\n                        context.toggle();\n                    });\n                } else if (trigger !== TRIGGER_MANUAL) {\n                    const eventIn = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSEENTER) : this.constructor.eventName(EVENT_FOCUSIN$1);\n                    const eventOut = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSELEAVE) : this.constructor.eventName(EVENT_FOCUSOUT$1);\n                    EventHandler.on(this._element, eventIn, this._config.selector, (event)=>{\n                        const context = this._initializeOnDelegatedTarget(event);\n                        context._activeTrigger[event.type === \"focusin\" ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;\n                        context._enter();\n                    });\n                    EventHandler.on(this._element, eventOut, this._config.selector, (event)=>{\n                        const context = this._initializeOnDelegatedTarget(event);\n                        context._activeTrigger[event.type === \"focusout\" ? TRIGGER_FOCUS : TRIGGER_HOVER] = context._element.contains(event.relatedTarget);\n                        context._leave();\n                    });\n                }\n            }\n            this._hideModalHandler = ()=>{\n                if (this._element) {\n                    this.hide();\n                }\n            };\n            EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);\n        }\n        _fixTitle() {\n            const title = this._element.getAttribute(\"title\");\n            if (!title) {\n                return;\n            }\n            if (!this._element.getAttribute(\"aria-label\") && !this._element.textContent.trim()) {\n                this._element.setAttribute(\"aria-label\", title);\n            }\n            this._element.setAttribute(\"data-bs-original-title\", title); // DO NOT USE IT. Is only for backwards compatibility\n            this._element.removeAttribute(\"title\");\n        }\n        _enter() {\n            if (this._isShown() || this._isHovered) {\n                this._isHovered = true;\n                return;\n            }\n            this._isHovered = true;\n            this._setTimeout(()=>{\n                if (this._isHovered) {\n                    this.show();\n                }\n            }, this._config.delay.show);\n        }\n        _leave() {\n            if (this._isWithActiveTrigger()) {\n                return;\n            }\n            this._isHovered = false;\n            this._setTimeout(()=>{\n                if (!this._isHovered) {\n                    this.hide();\n                }\n            }, this._config.delay.hide);\n        }\n        _setTimeout(handler, timeout) {\n            clearTimeout(this._timeout);\n            this._timeout = setTimeout(handler, timeout);\n        }\n        _isWithActiveTrigger() {\n            return Object.values(this._activeTrigger).includes(true);\n        }\n        _getConfig(config) {\n            const dataAttributes = Manipulator.getDataAttributes(this._element);\n            for (const dataAttribute of Object.keys(dataAttributes)){\n                if (DISALLOWED_ATTRIBUTES.has(dataAttribute)) {\n                    delete dataAttributes[dataAttribute];\n                }\n            }\n            config = {\n                ...dataAttributes,\n                ...typeof config === \"object\" && config ? config : {}\n            };\n            config = this._mergeConfigObj(config);\n            config = this._configAfterMerge(config);\n            this._typeCheckConfig(config);\n            return config;\n        }\n        _configAfterMerge(config) {\n            config.container = config.container === false ? document.body : getElement(config.container);\n            if (typeof config.delay === \"number\") {\n                config.delay = {\n                    show: config.delay,\n                    hide: config.delay\n                };\n            }\n            if (typeof config.title === \"number\") {\n                config.title = config.title.toString();\n            }\n            if (typeof config.content === \"number\") {\n                config.content = config.content.toString();\n            }\n            return config;\n        }\n        _getDelegateConfig() {\n            const config = {};\n            for (const [key, value] of Object.entries(this._config)){\n                if (this.constructor.Default[key] !== value) {\n                    config[key] = value;\n                }\n            }\n            config.selector = false;\n            config.trigger = \"manual\";\n            // In the future can be replaced with:\n            // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])\n            // `Object.fromEntries(keysWithDifferentValues)`\n            return config;\n        }\n        _disposePopper() {\n            if (this._popper) {\n                this._popper.destroy();\n                this._popper = null;\n            }\n            if (this.tip) {\n                this.tip.remove();\n                this.tip = null;\n            }\n        }\n        // Static\n        static jQueryInterface(config) {\n            return this.each(function() {\n                const data = Tooltip.getOrCreateInstance(this, config);\n                if (typeof config !== \"string\") {\n                    return;\n                }\n                if (typeof data[config] === \"undefined\") {\n                    throw new TypeError('No method named \"'.concat(config, '\"'));\n                }\n                data[config]();\n            });\n        }\n        constructor(element, config){\n            if (typeof Popper === \"undefined\") {\n                throw new TypeError(\"Bootstrap's tooltips require Popper (https://popper.js.org)\");\n            }\n            super(element, config);\n            // Private\n            this._isEnabled = true;\n            this._timeout = 0;\n            this._isHovered = null;\n            this._activeTrigger = {};\n            this._popper = null;\n            this._templateFactory = null;\n            this._newContent = null;\n            // Protected\n            this.tip = null;\n            this._setListeners();\n            if (!this._config.selector) {\n                this._fixTitle();\n            }\n        }\n    }\n    /**\n   * jQuery\n   */ defineJQueryPlugin(Tooltip);\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap popover.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$3 = \"popover\";\n    const SELECTOR_TITLE = \".popover-header\";\n    const SELECTOR_CONTENT = \".popover-body\";\n    const Default$2 = {\n        ...Tooltip.Default,\n        content: \"\",\n        offset: [\n            0,\n            8\n        ],\n        placement: \"right\",\n        template: '<div class=\"popover\" role=\"tooltip\">' + '<div class=\"popover-arrow\"></div>' + '<h3 class=\"popover-header\"></h3>' + '<div class=\"popover-body\"></div>' + \"</div>\",\n        trigger: \"click\"\n    };\n    const DefaultType$2 = {\n        ...Tooltip.DefaultType,\n        content: \"(null|string|element|function)\"\n    };\n    /**\n   * Class definition\n   */ class Popover extends Tooltip {\n        // Getters\n        static get Default() {\n            return Default$2;\n        }\n        static get DefaultType() {\n            return DefaultType$2;\n        }\n        static get NAME() {\n            return NAME$3;\n        }\n        // Overrides\n        _isWithContent() {\n            return this._getTitle() || this._getContent();\n        }\n        // Private\n        _getContentForTemplate() {\n            return {\n                [SELECTOR_TITLE]: this._getTitle(),\n                [SELECTOR_CONTENT]: this._getContent()\n            };\n        }\n        _getContent() {\n            return this._resolvePossibleFunction(this._config.content);\n        }\n        // Static\n        static jQueryInterface(config) {\n            return this.each(function() {\n                const data = Popover.getOrCreateInstance(this, config);\n                if (typeof config !== \"string\") {\n                    return;\n                }\n                if (typeof data[config] === \"undefined\") {\n                    throw new TypeError('No method named \"'.concat(config, '\"'));\n                }\n                data[config]();\n            });\n        }\n    }\n    /**\n   * jQuery\n   */ defineJQueryPlugin(Popover);\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap scrollspy.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$2 = \"scrollspy\";\n    const DATA_KEY$2 = \"bs.scrollspy\";\n    const EVENT_KEY$2 = \".\".concat(DATA_KEY$2);\n    const DATA_API_KEY = \".data-api\";\n    const EVENT_ACTIVATE = \"activate\".concat(EVENT_KEY$2);\n    const EVENT_CLICK = \"click\".concat(EVENT_KEY$2);\n    const EVENT_LOAD_DATA_API$1 = \"load\".concat(EVENT_KEY$2).concat(DATA_API_KEY);\n    const CLASS_NAME_DROPDOWN_ITEM = \"dropdown-item\";\n    const CLASS_NAME_ACTIVE$1 = \"active\";\n    const SELECTOR_DATA_SPY = '[data-bs-spy=\"scroll\"]';\n    const SELECTOR_TARGET_LINKS = \"[href]\";\n    const SELECTOR_NAV_LIST_GROUP = \".nav, .list-group\";\n    const SELECTOR_NAV_LINKS = \".nav-link\";\n    const SELECTOR_NAV_ITEMS = \".nav-item\";\n    const SELECTOR_LIST_ITEMS = \".list-group-item\";\n    const SELECTOR_LINK_ITEMS = \"\".concat(SELECTOR_NAV_LINKS, \", \").concat(SELECTOR_NAV_ITEMS, \" > \").concat(SELECTOR_NAV_LINKS, \", \").concat(SELECTOR_LIST_ITEMS);\n    const SELECTOR_DROPDOWN = \".dropdown\";\n    const SELECTOR_DROPDOWN_TOGGLE$1 = \".dropdown-toggle\";\n    const Default$1 = {\n        offset: null,\n        // TODO: v6 @deprecated, keep it for backwards compatibility reasons\n        rootMargin: \"0px 0px -25%\",\n        smoothScroll: false,\n        target: null,\n        threshold: [\n            0.1,\n            0.5,\n            1\n        ]\n    };\n    const DefaultType$1 = {\n        offset: \"(number|null)\",\n        // TODO v6 @deprecated, keep it for backwards compatibility reasons\n        rootMargin: \"string\",\n        smoothScroll: \"boolean\",\n        target: \"element\",\n        threshold: \"array\"\n    };\n    /**\n   * Class definition\n   */ class ScrollSpy extends BaseComponent {\n        // Getters\n        static get Default() {\n            return Default$1;\n        }\n        static get DefaultType() {\n            return DefaultType$1;\n        }\n        static get NAME() {\n            return NAME$2;\n        }\n        // Public\n        refresh() {\n            this._initializeTargetsAndObservables();\n            this._maybeEnableSmoothScroll();\n            if (this._observer) {\n                this._observer.disconnect();\n            } else {\n                this._observer = this._getNewObserver();\n            }\n            for (const section of this._observableSections.values()){\n                this._observer.observe(section);\n            }\n        }\n        dispose() {\n            this._observer.disconnect();\n            super.dispose();\n        }\n        // Private\n        _configAfterMerge(config) {\n            // TODO: on v6 target should be given explicitly & remove the {target: 'ss-target'} case\n            config.target = getElement(config.target) || document.body;\n            // TODO: v6 Only for backwards compatibility reasons. Use rootMargin only\n            config.rootMargin = config.offset ? \"\".concat(config.offset, \"px 0px -30%\") : config.rootMargin;\n            if (typeof config.threshold === \"string\") {\n                config.threshold = config.threshold.split(\",\").map((value)=>Number.parseFloat(value));\n            }\n            return config;\n        }\n        _maybeEnableSmoothScroll() {\n            if (!this._config.smoothScroll) {\n                return;\n            }\n            // unregister any previous listeners\n            EventHandler.off(this._config.target, EVENT_CLICK);\n            EventHandler.on(this._config.target, EVENT_CLICK, SELECTOR_TARGET_LINKS, (event)=>{\n                const observableSection = this._observableSections.get(event.target.hash);\n                if (observableSection) {\n                    event.preventDefault();\n                    const root = this._rootElement || window;\n                    const height = observableSection.offsetTop - this._element.offsetTop;\n                    if (root.scrollTo) {\n                        root.scrollTo({\n                            top: height,\n                            behavior: \"smooth\"\n                        });\n                        return;\n                    }\n                    // Chrome 60 doesn't support `scrollTo`\n                    root.scrollTop = height;\n                }\n            });\n        }\n        _getNewObserver() {\n            const options = {\n                root: this._rootElement,\n                threshold: this._config.threshold,\n                rootMargin: this._config.rootMargin\n            };\n            return new IntersectionObserver((entries)=>this._observerCallback(entries), options);\n        }\n        // The logic of selection\n        _observerCallback(entries) {\n            const targetElement = (entry)=>this._targetLinks.get(\"#\".concat(entry.target.id));\n            const activate = (entry)=>{\n                this._previousScrollData.visibleEntryTop = entry.target.offsetTop;\n                this._process(targetElement(entry));\n            };\n            const parentScrollTop = (this._rootElement || document.documentElement).scrollTop;\n            const userScrollsDown = parentScrollTop >= this._previousScrollData.parentScrollTop;\n            this._previousScrollData.parentScrollTop = parentScrollTop;\n            for (const entry of entries){\n                if (!entry.isIntersecting) {\n                    this._activeTarget = null;\n                    this._clearActiveClass(targetElement(entry));\n                    continue;\n                }\n                const entryIsLowerThanPrevious = entry.target.offsetTop >= this._previousScrollData.visibleEntryTop;\n                // if we are scrolling down, pick the bigger offsetTop\n                if (userScrollsDown && entryIsLowerThanPrevious) {\n                    activate(entry);\n                    // if parent isn't scrolled, let's keep the first visible item, breaking the iteration\n                    if (!parentScrollTop) {\n                        return;\n                    }\n                    continue;\n                }\n                // if we are scrolling up, pick the smallest offsetTop\n                if (!userScrollsDown && !entryIsLowerThanPrevious) {\n                    activate(entry);\n                }\n            }\n        }\n        _initializeTargetsAndObservables() {\n            this._targetLinks = new Map();\n            this._observableSections = new Map();\n            const targetLinks = SelectorEngine.find(SELECTOR_TARGET_LINKS, this._config.target);\n            for (const anchor of targetLinks){\n                // ensure that the anchor has an id and is not disabled\n                if (!anchor.hash || isDisabled(anchor)) {\n                    continue;\n                }\n                const observableSection = SelectorEngine.findOne(decodeURI(anchor.hash), this._element);\n                // ensure that the observableSection exists & is visible\n                if (isVisible(observableSection)) {\n                    this._targetLinks.set(decodeURI(anchor.hash), anchor);\n                    this._observableSections.set(anchor.hash, observableSection);\n                }\n            }\n        }\n        _process(target) {\n            if (this._activeTarget === target) {\n                return;\n            }\n            this._clearActiveClass(this._config.target);\n            this._activeTarget = target;\n            target.classList.add(CLASS_NAME_ACTIVE$1);\n            this._activateParents(target);\n            EventHandler.trigger(this._element, EVENT_ACTIVATE, {\n                relatedTarget: target\n            });\n        }\n        _activateParents(target) {\n            // Activate dropdown parents\n            if (target.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {\n                SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, target.closest(SELECTOR_DROPDOWN)).classList.add(CLASS_NAME_ACTIVE$1);\n                return;\n            }\n            for (const listGroup of SelectorEngine.parents(target, SELECTOR_NAV_LIST_GROUP)){\n                // Set triggered links parents as active\n                // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor\n                for (const item of SelectorEngine.prev(listGroup, SELECTOR_LINK_ITEMS)){\n                    item.classList.add(CLASS_NAME_ACTIVE$1);\n                }\n            }\n        }\n        _clearActiveClass(parent) {\n            parent.classList.remove(CLASS_NAME_ACTIVE$1);\n            const activeNodes = SelectorEngine.find(\"\".concat(SELECTOR_TARGET_LINKS, \".\").concat(CLASS_NAME_ACTIVE$1), parent);\n            for (const node of activeNodes){\n                node.classList.remove(CLASS_NAME_ACTIVE$1);\n            }\n        }\n        // Static\n        static jQueryInterface(config) {\n            return this.each(function() {\n                const data = ScrollSpy.getOrCreateInstance(this, config);\n                if (typeof config !== \"string\") {\n                    return;\n                }\n                if (data[config] === undefined || config.startsWith(\"_\") || config === \"constructor\") {\n                    throw new TypeError('No method named \"'.concat(config, '\"'));\n                }\n                data[config]();\n            });\n        }\n        constructor(element, config){\n            super(element, config);\n            // this._element is the observablesContainer and config.target the menu links wrapper\n            this._targetLinks = new Map();\n            this._observableSections = new Map();\n            this._rootElement = getComputedStyle(this._element).overflowY === \"visible\" ? null : this._element;\n            this._activeTarget = null;\n            this._observer = null;\n            this._previousScrollData = {\n                visibleEntryTop: 0,\n                parentScrollTop: 0\n            };\n            this.refresh(); // initialize\n        }\n    }\n    /**\n   * Data API implementation\n   */ EventHandler.on(window, EVENT_LOAD_DATA_API$1, ()=>{\n        for (const spy of SelectorEngine.find(SELECTOR_DATA_SPY)){\n            ScrollSpy.getOrCreateInstance(spy);\n        }\n    });\n    /**\n   * jQuery\n   */ defineJQueryPlugin(ScrollSpy);\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap tab.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME$1 = \"tab\";\n    const DATA_KEY$1 = \"bs.tab\";\n    const EVENT_KEY$1 = \".\".concat(DATA_KEY$1);\n    const EVENT_HIDE$1 = \"hide\".concat(EVENT_KEY$1);\n    const EVENT_HIDDEN$1 = \"hidden\".concat(EVENT_KEY$1);\n    const EVENT_SHOW$1 = \"show\".concat(EVENT_KEY$1);\n    const EVENT_SHOWN$1 = \"shown\".concat(EVENT_KEY$1);\n    const EVENT_CLICK_DATA_API = \"click\".concat(EVENT_KEY$1);\n    const EVENT_KEYDOWN = \"keydown\".concat(EVENT_KEY$1);\n    const EVENT_LOAD_DATA_API = \"load\".concat(EVENT_KEY$1);\n    const ARROW_LEFT_KEY = \"ArrowLeft\";\n    const ARROW_RIGHT_KEY = \"ArrowRight\";\n    const ARROW_UP_KEY = \"ArrowUp\";\n    const ARROW_DOWN_KEY = \"ArrowDown\";\n    const HOME_KEY = \"Home\";\n    const END_KEY = \"End\";\n    const CLASS_NAME_ACTIVE = \"active\";\n    const CLASS_NAME_FADE$1 = \"fade\";\n    const CLASS_NAME_SHOW$1 = \"show\";\n    const CLASS_DROPDOWN = \"dropdown\";\n    const SELECTOR_DROPDOWN_TOGGLE = \".dropdown-toggle\";\n    const SELECTOR_DROPDOWN_MENU = \".dropdown-menu\";\n    const NOT_SELECTOR_DROPDOWN_TOGGLE = \":not(\".concat(SELECTOR_DROPDOWN_TOGGLE, \")\");\n    const SELECTOR_TAB_PANEL = '.list-group, .nav, [role=\"tablist\"]';\n    const SELECTOR_OUTER = \".nav-item, .list-group-item\";\n    const SELECTOR_INNER = \".nav-link\".concat(NOT_SELECTOR_DROPDOWN_TOGGLE, \", .list-group-item\").concat(NOT_SELECTOR_DROPDOWN_TOGGLE, ', [role=\"tab\"]').concat(NOT_SELECTOR_DROPDOWN_TOGGLE);\n    const SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"tab\"], [data-bs-toggle=\"pill\"], [data-bs-toggle=\"list\"]'; // TODO: could only be `tab` in v6\n    const SELECTOR_INNER_ELEM = \"\".concat(SELECTOR_INNER, \", \").concat(SELECTOR_DATA_TOGGLE);\n    const SELECTOR_DATA_TOGGLE_ACTIVE = \".\".concat(CLASS_NAME_ACTIVE, '[data-bs-toggle=\"tab\"], .').concat(CLASS_NAME_ACTIVE, '[data-bs-toggle=\"pill\"], .').concat(CLASS_NAME_ACTIVE, '[data-bs-toggle=\"list\"]');\n    /**\n   * Class definition\n   */ class Tab extends BaseComponent {\n        // Getters\n        static get NAME() {\n            return NAME$1;\n        }\n        // Public\n        show() {\n            // Shows this elem and deactivate the active sibling if exists\n            const innerElem = this._element;\n            if (this._elemIsActive(innerElem)) {\n                return;\n            }\n            // Search for active tab on same parent to deactivate it\n            const active = this._getActiveElem();\n            const hideEvent = active ? EventHandler.trigger(active, EVENT_HIDE$1, {\n                relatedTarget: innerElem\n            }) : null;\n            const showEvent = EventHandler.trigger(innerElem, EVENT_SHOW$1, {\n                relatedTarget: active\n            });\n            if (showEvent.defaultPrevented || hideEvent && hideEvent.defaultPrevented) {\n                return;\n            }\n            this._deactivate(active, innerElem);\n            this._activate(innerElem, active);\n        }\n        // Private\n        _activate(element, relatedElem) {\n            if (!element) {\n                return;\n            }\n            element.classList.add(CLASS_NAME_ACTIVE);\n            this._activate(SelectorEngine.getElementFromSelector(element)); // Search and activate/show the proper section\n            const complete = ()=>{\n                if (element.getAttribute(\"role\") !== \"tab\") {\n                    element.classList.add(CLASS_NAME_SHOW$1);\n                    return;\n                }\n                element.removeAttribute(\"tabindex\");\n                element.setAttribute(\"aria-selected\", true);\n                this._toggleDropDown(element, true);\n                EventHandler.trigger(element, EVENT_SHOWN$1, {\n                    relatedTarget: relatedElem\n                });\n            };\n            this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));\n        }\n        _deactivate(element, relatedElem) {\n            if (!element) {\n                return;\n            }\n            element.classList.remove(CLASS_NAME_ACTIVE);\n            element.blur();\n            this._deactivate(SelectorEngine.getElementFromSelector(element)); // Search and deactivate the shown section too\n            const complete = ()=>{\n                if (element.getAttribute(\"role\") !== \"tab\") {\n                    element.classList.remove(CLASS_NAME_SHOW$1);\n                    return;\n                }\n                element.setAttribute(\"aria-selected\", false);\n                element.setAttribute(\"tabindex\", \"-1\");\n                this._toggleDropDown(element, false);\n                EventHandler.trigger(element, EVENT_HIDDEN$1, {\n                    relatedTarget: relatedElem\n                });\n            };\n            this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));\n        }\n        _keydown(event) {\n            if (![\n                ARROW_LEFT_KEY,\n                ARROW_RIGHT_KEY,\n                ARROW_UP_KEY,\n                ARROW_DOWN_KEY,\n                HOME_KEY,\n                END_KEY\n            ].includes(event.key)) {\n                return;\n            }\n            event.stopPropagation(); // stopPropagation/preventDefault both added to support up/down keys without scrolling the page\n            event.preventDefault();\n            const children = this._getChildren().filter((element)=>!isDisabled(element));\n            let nextActiveElement;\n            if ([\n                HOME_KEY,\n                END_KEY\n            ].includes(event.key)) {\n                nextActiveElement = children[event.key === HOME_KEY ? 0 : children.length - 1];\n            } else {\n                const isNext = [\n                    ARROW_RIGHT_KEY,\n                    ARROW_DOWN_KEY\n                ].includes(event.key);\n                nextActiveElement = getNextActiveElement(children, event.target, isNext, true);\n            }\n            if (nextActiveElement) {\n                nextActiveElement.focus({\n                    preventScroll: true\n                });\n                Tab.getOrCreateInstance(nextActiveElement).show();\n            }\n        }\n        _getChildren() {\n            // collection of inner elements\n            return SelectorEngine.find(SELECTOR_INNER_ELEM, this._parent);\n        }\n        _getActiveElem() {\n            return this._getChildren().find((child)=>this._elemIsActive(child)) || null;\n        }\n        _setInitialAttributes(parent, children) {\n            this._setAttributeIfNotExists(parent, \"role\", \"tablist\");\n            for (const child of children){\n                this._setInitialAttributesOnChild(child);\n            }\n        }\n        _setInitialAttributesOnChild(child) {\n            child = this._getInnerElement(child);\n            const isActive = this._elemIsActive(child);\n            const outerElem = this._getOuterElement(child);\n            child.setAttribute(\"aria-selected\", isActive);\n            if (outerElem !== child) {\n                this._setAttributeIfNotExists(outerElem, \"role\", \"presentation\");\n            }\n            if (!isActive) {\n                child.setAttribute(\"tabindex\", \"-1\");\n            }\n            this._setAttributeIfNotExists(child, \"role\", \"tab\");\n            // set attributes to the related panel too\n            this._setInitialAttributesOnTargetPanel(child);\n        }\n        _setInitialAttributesOnTargetPanel(child) {\n            const target = SelectorEngine.getElementFromSelector(child);\n            if (!target) {\n                return;\n            }\n            this._setAttributeIfNotExists(target, \"role\", \"tabpanel\");\n            if (child.id) {\n                this._setAttributeIfNotExists(target, \"aria-labelledby\", \"\".concat(child.id));\n            }\n        }\n        _toggleDropDown(element, open) {\n            const outerElem = this._getOuterElement(element);\n            if (!outerElem.classList.contains(CLASS_DROPDOWN)) {\n                return;\n            }\n            const toggle = (selector, className)=>{\n                const element = SelectorEngine.findOne(selector, outerElem);\n                if (element) {\n                    element.classList.toggle(className, open);\n                }\n            };\n            toggle(SELECTOR_DROPDOWN_TOGGLE, CLASS_NAME_ACTIVE);\n            toggle(SELECTOR_DROPDOWN_MENU, CLASS_NAME_SHOW$1);\n            outerElem.setAttribute(\"aria-expanded\", open);\n        }\n        _setAttributeIfNotExists(element, attribute, value) {\n            if (!element.hasAttribute(attribute)) {\n                element.setAttribute(attribute, value);\n            }\n        }\n        _elemIsActive(elem) {\n            return elem.classList.contains(CLASS_NAME_ACTIVE);\n        }\n        // Try to get the inner element (usually the .nav-link)\n        _getInnerElement(elem) {\n            return elem.matches(SELECTOR_INNER_ELEM) ? elem : SelectorEngine.findOne(SELECTOR_INNER_ELEM, elem);\n        }\n        // Try to get the outer element (usually the .nav-item)\n        _getOuterElement(elem) {\n            return elem.closest(SELECTOR_OUTER) || elem;\n        }\n        // Static\n        static jQueryInterface(config) {\n            return this.each(function() {\n                const data = Tab.getOrCreateInstance(this);\n                if (typeof config !== \"string\") {\n                    return;\n                }\n                if (data[config] === undefined || config.startsWith(\"_\") || config === \"constructor\") {\n                    throw new TypeError('No method named \"'.concat(config, '\"'));\n                }\n                data[config]();\n            });\n        }\n        constructor(element){\n            super(element);\n            this._parent = this._element.closest(SELECTOR_TAB_PANEL);\n            if (!this._parent) {\n                return;\n            // TODO: should throw exception in v6\n            // throw new TypeError(`${element.outerHTML} has not a valid parent ${SELECTOR_INNER_ELEM}`)\n            }\n            // Set up initial aria attributes\n            this._setInitialAttributes(this._parent, this._getChildren());\n            EventHandler.on(this._element, EVENT_KEYDOWN, (event)=>this._keydown(event));\n        }\n    }\n    /**\n   * Data API implementation\n   */ EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function(event) {\n        if ([\n            \"A\",\n            \"AREA\"\n        ].includes(this.tagName)) {\n            event.preventDefault();\n        }\n        if (isDisabled(this)) {\n            return;\n        }\n        Tab.getOrCreateInstance(this).show();\n    });\n    /**\n   * Initialize on focus\n   */ EventHandler.on(window, EVENT_LOAD_DATA_API, ()=>{\n        for (const element of SelectorEngine.find(SELECTOR_DATA_TOGGLE_ACTIVE)){\n            Tab.getOrCreateInstance(element);\n        }\n    });\n    /**\n   * jQuery\n   */ defineJQueryPlugin(Tab);\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap toast.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ /**\n   * Constants\n   */ const NAME = \"toast\";\n    const DATA_KEY = \"bs.toast\";\n    const EVENT_KEY = \".\".concat(DATA_KEY);\n    const EVENT_MOUSEOVER = \"mouseover\".concat(EVENT_KEY);\n    const EVENT_MOUSEOUT = \"mouseout\".concat(EVENT_KEY);\n    const EVENT_FOCUSIN = \"focusin\".concat(EVENT_KEY);\n    const EVENT_FOCUSOUT = \"focusout\".concat(EVENT_KEY);\n    const EVENT_HIDE = \"hide\".concat(EVENT_KEY);\n    const EVENT_HIDDEN = \"hidden\".concat(EVENT_KEY);\n    const EVENT_SHOW = \"show\".concat(EVENT_KEY);\n    const EVENT_SHOWN = \"shown\".concat(EVENT_KEY);\n    const CLASS_NAME_FADE = \"fade\";\n    const CLASS_NAME_HIDE = \"hide\"; // @deprecated - kept here only for backwards compatibility\n    const CLASS_NAME_SHOW = \"show\";\n    const CLASS_NAME_SHOWING = \"showing\";\n    const DefaultType = {\n        animation: \"boolean\",\n        autohide: \"boolean\",\n        delay: \"number\"\n    };\n    const Default = {\n        animation: true,\n        autohide: true,\n        delay: 5000\n    };\n    /**\n   * Class definition\n   */ class Toast extends BaseComponent {\n        // Getters\n        static get Default() {\n            return Default;\n        }\n        static get DefaultType() {\n            return DefaultType;\n        }\n        static get NAME() {\n            return NAME;\n        }\n        // Public\n        show() {\n            const showEvent = EventHandler.trigger(this._element, EVENT_SHOW);\n            if (showEvent.defaultPrevented) {\n                return;\n            }\n            this._clearTimeout();\n            if (this._config.animation) {\n                this._element.classList.add(CLASS_NAME_FADE);\n            }\n            const complete = ()=>{\n                this._element.classList.remove(CLASS_NAME_SHOWING);\n                EventHandler.trigger(this._element, EVENT_SHOWN);\n                this._maybeScheduleHide();\n            };\n            this._element.classList.remove(CLASS_NAME_HIDE); // @deprecated\n            reflow(this._element);\n            this._element.classList.add(CLASS_NAME_SHOW, CLASS_NAME_SHOWING);\n            this._queueCallback(complete, this._element, this._config.animation);\n        }\n        hide() {\n            if (!this.isShown()) {\n                return;\n            }\n            const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);\n            if (hideEvent.defaultPrevented) {\n                return;\n            }\n            const complete = ()=>{\n                this._element.classList.add(CLASS_NAME_HIDE); // @deprecated\n                this._element.classList.remove(CLASS_NAME_SHOWING, CLASS_NAME_SHOW);\n                EventHandler.trigger(this._element, EVENT_HIDDEN);\n            };\n            this._element.classList.add(CLASS_NAME_SHOWING);\n            this._queueCallback(complete, this._element, this._config.animation);\n        }\n        dispose() {\n            this._clearTimeout();\n            if (this.isShown()) {\n                this._element.classList.remove(CLASS_NAME_SHOW);\n            }\n            super.dispose();\n        }\n        isShown() {\n            return this._element.classList.contains(CLASS_NAME_SHOW);\n        }\n        // Private\n        _maybeScheduleHide() {\n            if (!this._config.autohide) {\n                return;\n            }\n            if (this._hasMouseInteraction || this._hasKeyboardInteraction) {\n                return;\n            }\n            this._timeout = setTimeout(()=>{\n                this.hide();\n            }, this._config.delay);\n        }\n        _onInteraction(event, isInteracting) {\n            switch(event.type){\n                case \"mouseover\":\n                case \"mouseout\":\n                    {\n                        this._hasMouseInteraction = isInteracting;\n                        break;\n                    }\n                case \"focusin\":\n                case \"focusout\":\n                    {\n                        this._hasKeyboardInteraction = isInteracting;\n                        break;\n                    }\n            }\n            if (isInteracting) {\n                this._clearTimeout();\n                return;\n            }\n            const nextElement = event.relatedTarget;\n            if (this._element === nextElement || this._element.contains(nextElement)) {\n                return;\n            }\n            this._maybeScheduleHide();\n        }\n        _setListeners() {\n            EventHandler.on(this._element, EVENT_MOUSEOVER, (event)=>this._onInteraction(event, true));\n            EventHandler.on(this._element, EVENT_MOUSEOUT, (event)=>this._onInteraction(event, false));\n            EventHandler.on(this._element, EVENT_FOCUSIN, (event)=>this._onInteraction(event, true));\n            EventHandler.on(this._element, EVENT_FOCUSOUT, (event)=>this._onInteraction(event, false));\n        }\n        _clearTimeout() {\n            clearTimeout(this._timeout);\n            this._timeout = null;\n        }\n        // Static\n        static jQueryInterface(config) {\n            return this.each(function() {\n                const data = Toast.getOrCreateInstance(this, config);\n                if (typeof config === \"string\") {\n                    if (typeof data[config] === \"undefined\") {\n                        throw new TypeError('No method named \"'.concat(config, '\"'));\n                    }\n                    data[config](this);\n                }\n            });\n        }\n        constructor(element, config){\n            super(element, config);\n            this._timeout = null;\n            this._hasMouseInteraction = false;\n            this._hasKeyboardInteraction = false;\n            this._setListeners();\n        }\n    }\n    /**\n   * Data API implementation\n   */ enableDismissTrigger(Toast);\n    /**\n   * jQuery\n   */ defineJQueryPlugin(Toast);\n    /**\n   * --------------------------------------------------------------------------\n   * Bootstrap index.umd.js\n   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n   * --------------------------------------------------------------------------\n   */ const index_umd = {\n        Alert,\n        Button,\n        Carousel,\n        Collapse,\n        Dropdown,\n        Modal,\n        Offcanvas,\n        Popover,\n        ScrollSpy,\n        Tab,\n        Toast,\n        Tooltip\n    };\n    return index_umd;\n}); //# sourceMappingURL=bootstrap.bundle.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/.pnpm/bootstrap@5.3.3_@popperjs+core@2.11.8/node_modules/bootstrap/dist/js/bootstrap.bundle.js\n"));

/***/ })

}]);